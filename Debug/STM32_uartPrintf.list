
STM32_uartPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc4  08002dc4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc4  08002dc4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc4  08002dc4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08002e34  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002e34  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066f0  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184d  00000000  00000000  00026780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00027fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  000287a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104ea  00000000  00000000  00028e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cf8  00000000  00000000  00039372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ffc3  00000000  00000000  0004006a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009002d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002060  00000000  00000000  00090080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d14 	.word	0x08002d14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002d14 	.word	0x08002d14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <LL_IOP_GRP1_EnableClock+0x28>)
 800022a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <LL_IOP_GRP1_EnableClock+0x28>)
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	430a      	orrs	r2, r1
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <LL_IOP_GRP1_EnableClock+0x28>)
 8000236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4013      	ands	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023e:	68fb      	ldr	r3, [r7, #12]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b004      	add	sp, #16
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40021000 	.word	0x40021000

0800024c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <LL_SYSCFG_SetEXTISource+0x48>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	21ff      	movs	r1, #255	; 0xff
 800025c:	400b      	ands	r3, r1
 800025e:	3302      	adds	r3, #2
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	589b      	ldr	r3, [r3, r2]
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	0c12      	lsrs	r2, r2, #16
 8000268:	210f      	movs	r1, #15
 800026a:	4091      	lsls	r1, r2
 800026c:	000a      	movs	r2, r1
 800026e:	43d2      	mvns	r2, r2
 8000270:	401a      	ands	r2, r3
 8000272:	0011      	movs	r1, r2
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	0c1b      	lsrs	r3, r3, #16
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	409a      	lsls	r2, r3
 800027c:	4805      	ldr	r0, [pc, #20]	; (8000294 <LL_SYSCFG_SetEXTISource+0x48>)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	24ff      	movs	r4, #255	; 0xff
 8000282:	4023      	ands	r3, r4
 8000284:	430a      	orrs	r2, r1
 8000286:	3302      	adds	r3, #2
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	501a      	str	r2, [r3, r0]
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b003      	add	sp, #12
 8000292:	bd90      	pop	{r4, r7, pc}
 8000294:	40010000 	.word	0x40010000

08000298 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	6819      	ldr	r1, [r3, #0]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	435b      	muls	r3, r3
 80002ac:	001a      	movs	r2, r3
 80002ae:	0013      	movs	r3, r2
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	189b      	adds	r3, r3, r2
 80002b4:	43db      	mvns	r3, r3
 80002b6:	400b      	ands	r3, r1
 80002b8:	001a      	movs	r2, r3
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	435b      	muls	r3, r3
 80002be:	6879      	ldr	r1, [r7, #4]
 80002c0:	434b      	muls	r3, r1
 80002c2:	431a      	orrs	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	601a      	str	r2, [r3, #0]
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b004      	add	sp, #16
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	68d9      	ldr	r1, [r3, #12]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	435b      	muls	r3, r3
 80002e4:	001a      	movs	r2, r3
 80002e6:	0013      	movs	r3, r2
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	189b      	adds	r3, r3, r2
 80002ec:	43db      	mvns	r3, r3
 80002ee:	400b      	ands	r3, r1
 80002f0:	001a      	movs	r2, r3
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	435b      	muls	r3, r3
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	434b      	muls	r3, r1
 80002fa:	431a      	orrs	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	60da      	str	r2, [r3, #12]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b004      	add	sp, #16
 8000306:	bd80      	pop	{r7, pc}

08000308 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000326:	2418      	movs	r4, #24
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2308      	movs	r3, #8
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f002 f86b 	bl	800240c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	2318      	movs	r3, #24
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f002 f864 	bl	800240c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000344:	2004      	movs	r0, #4
 8000346:	f7ff ff6b 	bl	8000220 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 800034a:	2080      	movs	r0, #128	; 0x80
 800034c:	f7ff ff68 	bl	8000220 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000350:	2001      	movs	r0, #1
 8000352:	f7ff ff65 	bl	8000220 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000356:	2002      	movs	r0, #2
 8000358:	f7ff ff62 	bl	8000220 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800035c:	23a0      	movs	r3, #160	; 0xa0
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	2120      	movs	r1, #32
 8000362:	0018      	movs	r0, r3
 8000364:	f7ff ffd0 	bl	8000308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_GPIO_Init+0xc8>)
 800036a:	0019      	movs	r1, r3
 800036c:	2002      	movs	r0, #2
 800036e:	f7ff ff6d 	bl	800024c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	019b      	lsls	r3, r3, #6
 8000376:	481d      	ldr	r0, [pc, #116]	; (80003ec <MX_GPIO_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	0019      	movs	r1, r3
 800037c:	f7ff ffa8 	bl	80002d0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	019b      	lsls	r3, r3, #6
 8000384:	4819      	ldr	r0, [pc, #100]	; (80003ec <MX_GPIO_Init+0xcc>)
 8000386:	2200      	movs	r2, #0
 8000388:	0019      	movs	r1, r3
 800038a:	f7ff ff85 	bl	8000298 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800038e:	0021      	movs	r1, r4
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	0192      	lsls	r2, r2, #6
 8000396:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2202      	movs	r2, #2
 80003a8:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 f907 	bl	80015c0 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2220      	movs	r2, #32
 80003b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2201      	movs	r2, #1
 80003bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003be:	003b      	movs	r3, r7
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003ca:	003b      	movs	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d0:	003a      	movs	r2, r7
 80003d2:	23a0      	movs	r3, #160	; 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fa33 	bl	8001844 <LL_GPIO_Init>

}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b009      	add	sp, #36	; 0x24
 80003e4:	bd90      	pop	{r4, r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	00040003 	.word	0x00040003
 80003ec:	50000800 	.word	0x50000800

080003f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <LL_RCC_HSI_Enable+0x18>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <LL_RCC_HSI_Enable+0x18>)
 80003fa:	2101      	movs	r1, #1
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <LL_RCC_HSI_IsReady+0x1c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2204      	movs	r2, #4
 8000416:	4013      	ands	r3, r2
 8000418:	2b04      	cmp	r3, #4
 800041a:	d101      	bne.n	8000420 <LL_RCC_HSI_IsReady+0x14>
 800041c:	2301      	movs	r3, #1
 800041e:	e000      	b.n	8000422 <LL_RCC_HSI_IsReady+0x16>
 8000420:	2300      	movs	r3, #0
}
 8000422:	0018      	movs	r0, r3
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a06      	ldr	r2, [pc, #24]	; (8000454 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800043a:	4013      	ands	r3, r2
 800043c:	0019      	movs	r1, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	021a      	lsls	r2, r3, #8
 8000442:	4b03      	ldr	r3, [pc, #12]	; (8000450 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000444:	430a      	orrs	r2, r1
 8000446:	605a      	str	r2, [r3, #4]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	ffffe0ff 	.word	0xffffe0ff

08000458 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <LL_RCC_SetSysClkSource+0x24>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	2203      	movs	r2, #3
 8000466:	4393      	bics	r3, r2
 8000468:	0019      	movs	r1, r3
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <LL_RCC_SetSysClkSource+0x24>)
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	430a      	orrs	r2, r1
 8000470:	60da      	str	r2, [r3, #12]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <LL_RCC_GetSysClkSource+0x14>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	220c      	movs	r2, #12
 800048a:	4013      	ands	r3, r2
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <LL_RCC_SetAHBPrescaler+0x24>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	22f0      	movs	r2, #240	; 0xf0
 80004a6:	4393      	bics	r3, r2
 80004a8:	0019      	movs	r1, r3
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <LL_RCC_SetAHBPrescaler+0x24>)
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	60da      	str	r2, [r3, #12]
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000

080004c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004ce:	4013      	ands	r3, r2
 80004d0:	0019      	movs	r1, r3
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	60da      	str	r2, [r3, #12]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000
 80004e8:	fffff8ff 	.word	0xfffff8ff

080004ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <LL_RCC_SetAPB2Prescaler+0x28>)
 80004fa:	4013      	ands	r3, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	430a      	orrs	r2, r1
 8000504:	60da      	str	r2, [r3, #12]
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000
 8000514:	ffffc7ff 	.word	0xffffc7ff

08000518 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	0c12      	lsrs	r2, r2, #16
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	0011      	movs	r1, r2
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	041b      	lsls	r3, r3, #16
 8000532:	0c1a      	lsrs	r2, r3, #16
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000536:	430a      	orrs	r2, r1
 8000538:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <LL_APB1_GRP1_EnableClock>:
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <LL_APB1_GRP1_EnableClock+0x28>)
 8000552:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <LL_APB1_GRP1_EnableClock+0x28>)
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	430a      	orrs	r2, r1
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <LL_APB1_GRP1_EnableClock+0x28>)
 800055e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000

08000574 <LL_APB2_GRP1_EnableClock>:
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <LL_APB2_GRP1_EnableClock+0x28>)
 800057e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <LL_APB2_GRP1_EnableClock+0x28>)
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <LL_APB2_GRP1_EnableClock+0x28>)
 800058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4013      	ands	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b004      	add	sp, #16
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <LL_FLASH_SetLatency+0x24>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2201      	movs	r2, #1
 80005ae:	4393      	bics	r3, r2
 80005b0:	0019      	movs	r1, r3
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <LL_FLASH_SetLatency+0x24>)
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40022000 	.word	0x40022000

080005c8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <LL_FLASH_GetLatency+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4013      	ands	r3, r2
}
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40022000 	.word	0x40022000

080005e0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <LL_SYSTICK_EnableIT+0x18>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <LL_SYSTICK_EnableIT+0x18>)
 80005ea:	2102      	movs	r1, #2
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	e000e010 	.word	0xe000e010

080005fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800060a:	4013      	ands	r3, r2
 800060c:	0019      	movs	r1, r3
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	430a      	orrs	r2, r1
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40007000 	.word	0x40007000
 8000624:	ffffe7ff 	.word	0xffffe7ff

08000628 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2201      	movs	r2, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}

08000644 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a1a      	ldr	r2, [r3, #32]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	621a      	str	r2, [r3, #32]
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}

08000662 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}

0800067a <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	639a      	str	r2, [r3, #56]	; 0x38
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}

08000692 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}

080006aa <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2220      	movs	r2, #32
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ff44 	bl	8000574 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	055b      	lsls	r3, r3, #21
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff29 	bl	8000548 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f8c3 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f7ff fe11 	bl	8000320 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 fe2f 	bl	8001360 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000702:	f000 fc2d 	bl	8000f60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_SYSTICK_EnableIT();
 8000706:	f7ff ff6b 	bl	80005e0 <LL_SYSTICK_EnableIT>
  RetargetInit(USART2);
 800070a:	4b5c      	ldr	r3, [pc, #368]	; (800087c <main+0x19c>)
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f915 	bl	800093c <RetargetInit>
  getchInit();
 8000712:	f000 fa1f 	bl	8000b54 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 8000716:	4b59      	ldr	r3, [pc, #356]	; (800087c <main+0x19c>)
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ffd2 	bl	80006c2 <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM2);
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff ff80 	bl	8000628 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2101      	movs	r1, #1
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ff88 	bl	8000644 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2110      	movs	r1, #16
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff ff82 	bl	8000644 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	005a      	lsls	r2, r3, #1
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff7a 	bl	8000644 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	015a      	lsls	r2, r3, #5
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ff72 	bl	8000644 <LL_TIM_CC_EnableChannel>



  LL_TIM_OC_SetCompareCH1(TIM2, 1200);
 8000760:	2396      	movs	r3, #150	; 0x96
 8000762:	00da      	lsls	r2, r3, #3
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ff79 	bl	8000662 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM2, 1200);
 8000770:	2396      	movs	r3, #150	; 0x96
 8000772:	00da      	lsls	r2, r3, #3
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff ff7d 	bl	800067a <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM2, 1200);
 8000780:	2396      	movs	r3, #150	; 0x96
 8000782:	00da      	lsls	r2, r3, #3
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff81 	bl	8000692 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIM2, 1200);
 8000790:	2396      	movs	r3, #150	; 0x96
 8000792:	00da      	lsls	r2, r3, #3
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff ff85 	bl	80006aa <LL_TIM_OC_SetCompareCH4>
  {




if(kbhit()){
 80007a0:	f000 fa02 	bl	8000ba8 <kbhit>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d0fb      	beq.n	80007a0 <main+0xc0>

		char var = getch();
 80007a8:	1dfc      	adds	r4, r7, #7
 80007aa:	f000 f9dd 	bl	8000b68 <getch>
 80007ae:	0003      	movs	r3, r0
 80007b0:	7023      	strb	r3, [r4, #0]

			if(var == 'A')
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b41      	cmp	r3, #65	; 0x41
 80007b8:	d114      	bne.n	80007e4 <main+0x104>
			{
				  LL_TIM_OC_SetCompareCH1(TIM2, 1600);
 80007ba:	23c8      	movs	r3, #200	; 0xc8
 80007bc:	00da      	lsls	r2, r3, #3
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff4c 	bl	8000662 <LL_TIM_OC_SetCompareCH1>
				  LL_mDelay(1000);
 80007ca:	23fa      	movs	r3, #250	; 0xfa
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fdc2 	bl	8002358 <LL_mDelay>
				  LL_TIM_OC_SetCompareCH1(TIM2, 1200);
 80007d4:	2396      	movs	r3, #150	; 0x96
 80007d6:	00da      	lsls	r2, r3, #3
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ff3f 	bl	8000662 <LL_TIM_OC_SetCompareCH1>


			}


			if(var == 'B')
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b42      	cmp	r3, #66	; 0x42
 80007ea:	d114      	bne.n	8000816 <main+0x136>
			{
				  LL_TIM_OC_SetCompareCH2(TIM2, 1600);
 80007ec:	23c8      	movs	r3, #200	; 0xc8
 80007ee:	00da      	lsls	r2, r3, #3
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff3f 	bl	800067a <LL_TIM_OC_SetCompareCH2>
				  LL_mDelay(1000);
 80007fc:	23fa      	movs	r3, #250	; 0xfa
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fda9 	bl	8002358 <LL_mDelay>
				  LL_TIM_OC_SetCompareCH2(TIM2, 1200);
 8000806:	2396      	movs	r3, #150	; 0x96
 8000808:	00da      	lsls	r2, r3, #3
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff32 	bl	800067a <LL_TIM_OC_SetCompareCH2>
			}


			if(var == 'C')
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b43      	cmp	r3, #67	; 0x43
 800081c:	d114      	bne.n	8000848 <main+0x168>
			{
				  LL_TIM_OC_SetCompareCH3(TIM2, 1600);
 800081e:	23c8      	movs	r3, #200	; 0xc8
 8000820:	00da      	lsls	r2, r3, #3
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ff32 	bl	8000692 <LL_TIM_OC_SetCompareCH3>
				  LL_mDelay(1000);
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fd90 	bl	8002358 <LL_mDelay>

				  LL_TIM_OC_SetCompareCH3(TIM2, 1200);
 8000838:	2396      	movs	r3, #150	; 0x96
 800083a:	00da      	lsls	r2, r3, #3
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff ff25 	bl	8000692 <LL_TIM_OC_SetCompareCH3>
			}

			if(var == 'D')
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b44      	cmp	r3, #68	; 0x44
 800084e:	d1a7      	bne.n	80007a0 <main+0xc0>
			{
			  LL_TIM_OC_SetCompareCH4(TIM2, 1600);
 8000850:	23c8      	movs	r3, #200	; 0xc8
 8000852:	00da      	lsls	r2, r3, #3
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	0011      	movs	r1, r2
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff ff25 	bl	80006aa <LL_TIM_OC_SetCompareCH4>
			  LL_mDelay(1000);
 8000860:	23fa      	movs	r3, #250	; 0xfa
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fd77 	bl	8002358 <LL_mDelay>

			  LL_TIM_OC_SetCompareCH4(TIM2, 1200);
 800086a:	2396      	movs	r3, #150	; 0x96
 800086c:	00da      	lsls	r2, r3, #3
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff18 	bl	80006aa <LL_TIM_OC_SetCompareCH4>
if(kbhit()){
 800087a:	e791      	b.n	80007a0 <main+0xc0>
 800087c:	40004400 	.word	0x40004400

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fe8b 	bl	80005a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	f7ff fe9c 	bl	80005c8 <LL_FLASH_GetLatency>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d1fb      	bne.n	800088c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff feaf 	bl	80005fc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800089e:	f7ff fda7 	bl	80003f0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	f7ff fdb2 	bl	800040c <LL_RCC_HSI_IsReady>
 80008a8:	0003      	movs	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d1fa      	bne.n	80008a4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008ae:	2010      	movs	r0, #16
 80008b0:	f7ff fdbc 	bl	800042c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fdef 	bl	8000498 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fe00 	bl	80004c0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fe13 	bl	80004ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fdc6 	bl	8000458 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	f7ff fdd7 	bl	8000480 <LL_RCC_GetSysClkSource>
 80008d2:	0003      	movs	r3, r0
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d1fa      	bne.n	80008ce <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <SystemClock_Config+0x78>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fd2c 	bl	8002338 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SystemClock_Config+0x78>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fd5a 	bl	800239c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	031b      	lsls	r3, r3, #12
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fe13 	bl	8000518 <LL_RCC_SetUSARTClockSource>
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00f42400 	.word	0x00f42400

080008fc <LL_USART_IsActiveFlag_TXE>:
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	4013      	ands	r3, r2
 800090c:	2b80      	cmp	r3, #128	; 0x80
 800090e:	d101      	bne.n	8000914 <LL_USART_IsActiveFlag_TXE+0x18>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000914:	2300      	movs	r3, #0
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}

0800091e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	000a      	movs	r2, r1
 8000928:	1cfb      	adds	r3, r7, #3
 800092a:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800092c:	1cfb      	adds	r3, r7, #3
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}

0800093c <RetargetInit>:
#define STDERR_FILENO 2

USART_TypeDef *gHuart;
extern  uint8_t g_rxCarUSART2;

void RetargetInit(USART_TypeDef *huart) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <RetargetInit+0x28>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <RetargetInit+0x2c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6898      	ldr	r0, [r3, #8]
 8000950:	2300      	movs	r3, #0
 8000952:	2202      	movs	r2, #2
 8000954:	2100      	movs	r1, #0
 8000956:	f001 fd61 	bl	800241c <setvbuf>
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000084 	.word	0x20000084
 8000968:	20000004 	.word	0x20000004

0800096c <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d002      	beq.n	8000984 <_write+0x18>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d11c      	bne.n	80009be <_write+0x52>
      for (int i=0; i<len;i++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e013      	b.n	80009b2 <_write+0x46>
      {
        while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_write+0x68>)
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ffb4 	bl	80008fc <LL_USART_IsActiveFlag_TXE>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d0f9      	beq.n	800098c <_write+0x20>
        LL_USART_TransmitData8(USART2,*ptr);
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <_write+0x68>)
 800099e:	0019      	movs	r1, r3
 80009a0:	0010      	movs	r0, r2
 80009a2:	f7ff ffbc 	bl	800091e <LL_USART_TransmitData8>
        ptr++;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
      for (int i=0; i<len;i++)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	dbe7      	blt.n	800098a <_write+0x1e>
      }
    return len;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	e006      	b.n	80009cc <_write+0x60>
  }
  errno = EBADF;
 80009be:	f001 fcfb 	bl	80023b8 <__errno>
 80009c2:	0003      	movs	r3, r0
 80009c4:	2209      	movs	r2, #9
 80009c6:	601a      	str	r2, [r3, #0]
  return -1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b006      	add	sp, #24
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40004400 	.word	0x40004400

080009d8 <_close>:

int _close(int fd) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db04      	blt.n	80009f0 <_close+0x18>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dc01      	bgt.n	80009f0 <_close+0x18>
    return 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e006      	b.n	80009fe <_close+0x26>

  errno = EBADF;
 80009f0:	f001 fce2 	bl	80023b8 <__errno>
 80009f4:	0003      	movs	r3, r0
 80009f6:	2209      	movs	r2, #9
 80009f8:	601a      	str	r2, [r3, #0]
  return -1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	425b      	negs	r3, r3
}
 80009fe:	0018      	movs	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000a12:	f001 fcd1 	bl	80023b8 <__errno>
 8000a16:	0003      	movs	r3, r0
 8000a18:	2209      	movs	r2, #9
 8000a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_read>:

int _read(int fd, char* ptr, int len) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]

  if (fd == STDIN_FILENO) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d112      	bne.n	8000a60 <_read+0x38>
      do
      {
    	if (g_rxCarUSART2==255)
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <_read+0x50>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2bff      	cmp	r3, #255	; 0xff
 8000a40:	d101      	bne.n	8000a46 <_read+0x1e>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000a42:	bf30      	wfi
}
 8000a44:	46c0      	nop			; (mov r8, r8)
    	{
    	  __WFI(); //wait for interrupt (for a key ==> data RX)
    	}
      }
      while(g_rxCarUSART2==255); //while no char received
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <_read+0x50>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2bff      	cmp	r3, #255	; 0xff
 8000a4c:	d0f5      	beq.n	8000a3a <_read+0x12>
      *ptr=g_rxCarUSART2;  //save received data
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <_read+0x50>)
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	701a      	strb	r2, [r3, #0]
      g_rxCarUSART2=255; //clear char received
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_read+0x50>)
 8000a58:	22ff      	movs	r2, #255	; 0xff
 8000a5a:	701a      	strb	r2, [r3, #0]
      return 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e006      	b.n	8000a6e <_read+0x46>
  }
  errno = EBADF;
 8000a60:	f001 fcaa 	bl	80023b8 <__errno>
 8000a64:	0003      	movs	r3, r0
 8000a66:	2209      	movs	r2, #9
 8000a68:	601a      	str	r2, [r3, #0]
  return -1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	425b      	negs	r3, r3
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20000088 	.word	0x20000088

08000a7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db08      	blt.n	8000a9e <_fstat+0x22>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	dc05      	bgt.n	8000a9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	0192      	lsls	r2, r2, #6
 8000a98:	605a      	str	r2, [r3, #4]
    return 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e005      	b.n	8000aaa <_fstat+0x2e>
  }

  errno = EBADF;
 8000a9e:	f001 fc8b 	bl	80023b8 <__errno>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	2209      	movs	r2, #9
 8000aa6:	601a      	str	r2, [r3, #0]
  return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <LL_USART_IsActiveFlag_RXNE>:
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	2220      	movs	r2, #32
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2b20      	cmp	r3, #32
 8000ac4:	d101      	bne.n	8000aca <LL_USART_IsActiveFlag_RXNE+0x18>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <LL_USART_ReceiveData8>:
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	b2db      	uxtb	r3, r3
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <HardFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <USART2_IRQHandler+0x28>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff ffc1 	bl	8000ab2 <LL_USART_IsActiveFlag_RXNE>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d007      	beq.n	8000b44 <USART2_IRQHandler+0x20>
  {
    g_rxCarUSART2=LL_USART_ReceiveData8(USART2);
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <USART2_IRQHandler+0x28>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ffcc 	bl	8000ad4 <LL_USART_ReceiveData8>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <USART2_IRQHandler+0x2c>)
 8000b42:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	20000088 	.word	0x20000088

08000b54 <getchInit>:

/* USER CODE BEGIN 1 */
void getchInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	g_rxCarUSART2=255; //no char received
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <getchInit+0x10>)
 8000b5a:	22ff      	movs	r2, #255	; 0xff
 8000b5c:	701a      	strb	r2, [r3, #0]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000088 	.word	0x20000088

08000b68 <getch>:

//Return  a char received on UART2
// Wait if none received yet
uint8_t getch(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  volatile uint8_t l_car=1;
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
  do
  {
	if (g_rxCarUSART2==255)
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <getch+0x3c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2bff      	cmp	r3, #255	; 0xff
 8000b7a:	d101      	bne.n	8000b80 <getch+0x18>
  __ASM volatile ("wfi");
 8000b7c:	bf30      	wfi
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
	{
	  __WFI(); //wait for interrupt (for a key ==> data RX)
	}
  }
  while(g_rxCarUSART2==255); //while no char received
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <getch+0x3c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2bff      	cmp	r3, #255	; 0xff
 8000b86:	d0f5      	beq.n	8000b74 <getch+0xc>

  l_car=g_rxCarUSART2; //save received data
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <getch+0x3c>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
  g_rxCarUSART2=255; //clear char received
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <getch+0x3c>)
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	701a      	strb	r2, [r3, #0]
  return l_car; //return received data
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000088 	.word	0x20000088

08000ba8 <kbhit>:
//Return 1 if a char received on UART2
// else 0
int kbhit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
 if(g_rxCarUSART2==255)
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <kbhit+0x18>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d101      	bne.n	8000bb8 <kbhit+0x10>
   return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e000      	b.n	8000bba <kbhit+0x12>
 else
   return 1;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000088 	.word	0x20000088

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f001 fbe0 	bl	80023b8 <__errno>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	425b      	negs	r3, r3
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	18d2      	adds	r2, r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b006      	add	sp, #24
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20002000 	.word	0x20002000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	2000008c 	.word	0x2000008c
 8000c2c:	200000a0 	.word	0x200000a0

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <SystemInit+0x64>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <SystemInit+0x64>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0049      	lsls	r1, r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <SystemInit+0x64>)
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <SystemInit+0x64>)
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <SystemInit+0x68>)
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <SystemInit+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <SystemInit+0x64>)
 8000c54:	4911      	ldr	r1, [pc, #68]	; (8000c9c <SystemInit+0x6c>)
 8000c56:	400a      	ands	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <SystemInit+0x64>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <SystemInit+0x64>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	438a      	bics	r2, r1
 8000c64:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <SystemInit+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SystemInit+0x64>)
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <SystemInit+0x70>)
 8000c6e:	400a      	ands	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <SystemInit+0x64>)
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <SystemInit+0x64>)
 8000c78:	490a      	ldr	r1, [pc, #40]	; (8000ca4 <SystemInit+0x74>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SystemInit+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <SystemInit+0x78>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	0512      	lsls	r2, r2, #20
 8000c8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40021000 	.word	0x40021000
 8000c98:	88ff400c 	.word	0x88ff400c
 8000c9c:	fef6fff6 	.word	0xfef6fff6
 8000ca0:	fffbffff 	.word	0xfffbffff
 8000ca4:	ff02ffff 	.word	0xff02ffff
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	231f      	movs	r3, #31
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <NVIC_EnableIRQ+0x28>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b7f      	cmp	r3, #127	; 0x7f
 8000cec:	d932      	bls.n	8000d54 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <NVIC_SetPriority+0xd4>)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	3b08      	subs	r3, #8
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3306      	adds	r3, #6
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	3304      	adds	r3, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1dfa      	adds	r2, r7, #7
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	2203      	movs	r2, #3
 8000d10:	400a      	ands	r2, r1
 8000d12:	00d2      	lsls	r2, r2, #3
 8000d14:	21ff      	movs	r1, #255	; 0xff
 8000d16:	4091      	lsls	r1, r2
 8000d18:	000a      	movs	r2, r1
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	401a      	ands	r2, r3
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2303      	movs	r3, #3
 8000d30:	4003      	ands	r3, r0
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <NVIC_SetPriority+0xd4>)
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001c      	movs	r4, r3
 8000d3e:	230f      	movs	r3, #15
 8000d40:	4023      	ands	r3, r4
 8000d42:	3b08      	subs	r3, #8
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	430a      	orrs	r2, r1
 8000d48:	3306      	adds	r3, #6
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	18c3      	adds	r3, r0, r3
 8000d4e:	3304      	adds	r3, #4
 8000d50:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d52:	e027      	b.n	8000da4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	33c0      	adds	r3, #192	; 0xc0
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	589b      	ldr	r3, [r3, r2]
 8000d64:	1dfa      	adds	r2, r7, #7
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	0011      	movs	r1, r2
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	00d2      	lsls	r2, r2, #3
 8000d70:	21ff      	movs	r1, #255	; 0xff
 8000d72:	4091      	lsls	r1, r2
 8000d74:	000a      	movs	r2, r1
 8000d76:	43d2      	mvns	r2, r2
 8000d78:	401a      	ands	r2, r3
 8000d7a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	019b      	lsls	r3, r3, #6
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	401a      	ands	r2, r3
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	4003      	ands	r3, r0
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <NVIC_SetPriority+0xd8>)
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	33c0      	adds	r3, #192	; 0xc0
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	501a      	str	r2, [r3, r0]
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <LL_APB1_GRP1_EnableClock>:
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <LL_APB1_GRP1_EnableClock+0x28>)
 8000dbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_APB1_GRP1_EnableClock+0x28>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <LL_APB1_GRP1_EnableClock+0x28>)
 8000dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000

08000de0 <LL_IOP_GRP1_EnableClock>:
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <LL_IOP_GRP1_EnableClock+0x28>)
 8000dea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <LL_IOP_GRP1_EnableClock+0x28>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <LL_IOP_GRP1_EnableClock+0x28>)
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b004      	add	sp, #16
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000

08000e0c <LL_TIM_DisableARRPreload>:
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <LL_TIM_OC_DisableFast>:
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d00d      	beq.n	8000e58 <LL_TIM_OC_DisableFast+0x2c>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d008      	beq.n	8000e54 <LL_TIM_OC_DisableFast+0x28>
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d101      	bne.n	8000e50 <LL_TIM_OC_DisableFast+0x24>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e004      	b.n	8000e5a <LL_TIM_OC_DisableFast+0x2e>
 8000e50:	2306      	movs	r3, #6
 8000e52:	e002      	b.n	8000e5a <LL_TIM_OC_DisableFast+0x2e>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e000      	b.n	8000e5a <LL_TIM_OC_DisableFast+0x2e>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	001a      	movs	r2, r3
 8000e62:	0029      	movs	r1, r5
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <LL_TIM_OC_DisableFast+0x5c>)
 8000e66:	5c5b      	ldrb	r3, [r3, r1]
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	0029      	movs	r1, r5
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <LL_TIM_OC_DisableFast+0x60>)
 8000e72:	5c52      	ldrb	r2, [r2, r1]
 8000e74:	0011      	movs	r1, r2
 8000e76:	2204      	movs	r2, #4
 8000e78:	408a      	lsls	r2, r1
 8000e7a:	43d2      	mvns	r2, r2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	6023      	str	r3, [r4, #0]
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	08002d50 	.word	0x08002d50
 8000e8c:	08002d58 	.word	0x08002d58

08000e90 <LL_TIM_OC_EnablePreload>:
{
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d00d      	beq.n	8000ebc <LL_TIM_OC_EnablePreload+0x2c>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	d008      	beq.n	8000eb8 <LL_TIM_OC_EnablePreload+0x28>
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d101      	bne.n	8000eb4 <LL_TIM_OC_EnablePreload+0x24>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e004      	b.n	8000ebe <LL_TIM_OC_EnablePreload+0x2e>
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	e002      	b.n	8000ebe <LL_TIM_OC_EnablePreload+0x2e>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e000      	b.n	8000ebe <LL_TIM_OC_EnablePreload+0x2e>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3318      	adds	r3, #24
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	0029      	movs	r1, r5
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <LL_TIM_OC_EnablePreload+0x5c>)
 8000eca:	5c5b      	ldrb	r3, [r3, r1]
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	0029      	movs	r1, r5
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <LL_TIM_OC_EnablePreload+0x60>)
 8000ed6:	5c5b      	ldrb	r3, [r3, r1]
 8000ed8:	0019      	movs	r1, r3
 8000eda:	2308      	movs	r3, #8
 8000edc:	408b      	lsls	r3, r1
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	6023      	str	r3, [r4, #0]
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	08002d50 	.word	0x08002d50
 8000ef0:	08002d58 	.word	0x08002d58

08000ef4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <LL_TIM_SetClockSource+0x24>)
 8000f04:	401a      	ands	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	ffffbff8 	.word	0xffffbff8

08000f1c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2270      	movs	r2, #112	; 0x70
 8000f2c:	4393      	bics	r3, r2
 8000f2e:	001a      	movs	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	605a      	str	r2, [r3, #4]
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	4393      	bics	r3, r2
 8000f50:	001a      	movs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	609a      	str	r2, [r3, #8]
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f66:	2528      	movs	r5, #40	; 0x28
 8000f68:	197b      	adds	r3, r7, r5
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	001a      	movs	r2, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	f001 fa4b 	bl	800240c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f76:	2418      	movs	r4, #24
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	001a      	movs	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f001 fa43 	bl	800240c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	003b      	movs	r3, r7
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2318      	movs	r3, #24
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f001 fa3c 	bl	800240c <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff ff0d 	bl	8000db4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	200f      	movs	r0, #15
 8000f9e:	f7ff fe9b 	bl	8000cd8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fe82 	bl	8000cac <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 19;
 8000fa8:	197b      	adds	r3, r7, r5
 8000faa:	2213      	movs	r2, #19
 8000fac:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fae:	197b      	adds	r3, r7, r5
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 16000;
 8000fb4:	197b      	adds	r3, r7, r5
 8000fb6:	22fa      	movs	r2, #250	; 0xfa
 8000fb8:	0192      	lsls	r2, r2, #6
 8000fba:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fbc:	197b      	adds	r3, r7, r5
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000fc2:	197a      	adds	r2, r7, r5
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 feee 	bl	8001dac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff19 	bl	8000e0c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	2100      	movs	r1, #0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff87 	bl	8000ef4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	2101      	movs	r1, #1
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff ff4f 	bl	8000e90 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	2260      	movs	r2, #96	; 0x60
 8000ff6:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 4000;
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	22fa      	movs	r2, #250	; 0xfa
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001006:	193b      	adds	r3, r7, r4
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800100c:	193a      	adds	r2, r7, r4
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	2101      	movs	r1, #1
 8001014:	0018      	movs	r0, r3
 8001016:	f000 ff1b 	bl	8001e50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	2101      	movs	r1, #1
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff03 	bl	8000e2c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	2110      	movs	r1, #16
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff2f 	bl	8000e90 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001038:	193a      	adds	r2, r7, r4
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	2110      	movs	r1, #16
 8001040:	0018      	movs	r0, r3
 8001042:	f000 ff05 	bl	8001e50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	2110      	movs	r1, #16
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff feed 	bl	8000e2c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	005a      	lsls	r2, r3, #1
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff17 	bl	8000e90 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001068:	193a      	adds	r2, r7, r4
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	0059      	lsls	r1, r3, #1
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0018      	movs	r0, r3
 8001074:	f000 feec 	bl	8001e50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	005a      	lsls	r2, r3, #1
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff fed2 	bl	8000e2c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	015a      	lsls	r2, r3, #5
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fefc 	bl	8000e90 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001098:	193b      	adds	r3, r7, r4
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800109e:	193a      	adds	r2, r7, r4
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	0159      	lsls	r1, r3, #5
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 fed1 	bl	8001e50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	015a      	lsls	r2, r3, #5
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff feb7 	bl	8000e2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	2100      	movs	r1, #0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff29 	bl	8000f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff ff36 	bl	8000f40 <LL_TIM_DisableMasterSlaveMode>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff fe83 	bl	8000de0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fe80 	bl	8000de0 <LL_IOP_GRP1_EnableClock>
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80010e0:	003b      	movs	r3, r7
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010e6:	003b      	movs	r3, r7
 80010e8:	2202      	movs	r2, #2
 80010ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ec:	003b      	movs	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010f2:	003b      	movs	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010f8:	003b      	movs	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80010fe:	003b      	movs	r3, r7
 8001100:	2202      	movs	r2, #2
 8001102:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	003a      	movs	r2, r7
 8001106:	23a0      	movs	r3, #160	; 0xa0
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f000 fb99 	bl	8001844 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001112:	003b      	movs	r3, r7
 8001114:	2202      	movs	r2, #2
 8001116:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001118:	003b      	movs	r3, r7
 800111a:	2202      	movs	r2, #2
 800111c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800111e:	003b      	movs	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001124:	003b      	movs	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112a:	003b      	movs	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001130:	003b      	movs	r3, r7
 8001132:	2202      	movs	r2, #2
 8001134:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	003a      	movs	r2, r7
 8001138:	23a0      	movs	r3, #160	; 0xa0
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fb80 	bl	8001844 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001144:	003b      	movs	r3, r7
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	00d2      	lsls	r2, r2, #3
 800114a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800114c:	003b      	movs	r3, r7
 800114e:	2202      	movs	r2, #2
 8001150:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001152:	003b      	movs	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001158:	003b      	movs	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	003b      	movs	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001164:	003b      	movs	r3, r7
 8001166:	2202      	movs	r2, #2
 8001168:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	003b      	movs	r3, r7
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <MX_TIM2_Init+0x250>)
 800116e:	0019      	movs	r1, r3
 8001170:	0010      	movs	r0, r2
 8001172:	f000 fb67 	bl	8001844 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001176:	003b      	movs	r3, r7
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800117e:	003b      	movs	r3, r7
 8001180:	2202      	movs	r2, #2
 8001182:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001184:	003b      	movs	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118a:	003b      	movs	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001190:	003b      	movs	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001196:	003b      	movs	r3, r7
 8001198:	2202      	movs	r2, #2
 800119a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	003b      	movs	r3, r7
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <MX_TIM2_Init+0x250>)
 80011a0:	0019      	movs	r1, r3
 80011a2:	0010      	movs	r0, r2
 80011a4:	f000 fb4e 	bl	8001844 <LL_GPIO_Init>

}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b00e      	add	sp, #56	; 0x38
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}
 80011b0:	50000400 	.word	0x50000400

080011b4 <NVIC_EnableIRQ>:
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	0002      	movs	r2, r0
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	231f      	movs	r3, #31
 80011c8:	401a      	ands	r2, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <NVIC_EnableIRQ+0x28>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	4091      	lsls	r1, r2
 80011d0:	000a      	movs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <NVIC_SetPriority>:
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b7f      	cmp	r3, #127	; 0x7f
 80011f4:	d932      	bls.n	800125c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <NVIC_SetPriority+0xd4>)
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	0019      	movs	r1, r3
 80011fe:	230f      	movs	r3, #15
 8001200:	400b      	ands	r3, r1
 8001202:	3b08      	subs	r3, #8
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3306      	adds	r3, #6
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1dfa      	adds	r2, r7, #7
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	0011      	movs	r1, r2
 8001216:	2203      	movs	r2, #3
 8001218:	400a      	ands	r2, r1
 800121a:	00d2      	lsls	r2, r2, #3
 800121c:	21ff      	movs	r1, #255	; 0xff
 800121e:	4091      	lsls	r1, r2
 8001220:	000a      	movs	r2, r1
 8001222:	43d2      	mvns	r2, r2
 8001224:	401a      	ands	r2, r3
 8001226:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	019b      	lsls	r3, r3, #6
 800122c:	22ff      	movs	r2, #255	; 0xff
 800122e:	401a      	ands	r2, r3
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	0018      	movs	r0, r3
 8001236:	2303      	movs	r3, #3
 8001238:	4003      	ands	r3, r0
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <NVIC_SetPriority+0xd4>)
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	001c      	movs	r4, r3
 8001246:	230f      	movs	r3, #15
 8001248:	4023      	ands	r3, r4
 800124a:	3b08      	subs	r3, #8
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	430a      	orrs	r2, r1
 8001250:	3306      	adds	r3, #6
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	18c3      	adds	r3, r0, r3
 8001256:	3304      	adds	r3, #4
 8001258:	601a      	str	r2, [r3, #0]
}
 800125a:	e027      	b.n	80012ac <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125c:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <NVIC_SetPriority+0xd8>)
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	33c0      	adds	r3, #192	; 0xc0
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	589b      	ldr	r3, [r3, r2]
 800126c:	1dfa      	adds	r2, r7, #7
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	0011      	movs	r1, r2
 8001272:	2203      	movs	r2, #3
 8001274:	400a      	ands	r2, r1
 8001276:	00d2      	lsls	r2, r2, #3
 8001278:	21ff      	movs	r1, #255	; 0xff
 800127a:	4091      	lsls	r1, r2
 800127c:	000a      	movs	r2, r1
 800127e:	43d2      	mvns	r2, r2
 8001280:	401a      	ands	r2, r3
 8001282:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	019b      	lsls	r3, r3, #6
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	401a      	ands	r2, r3
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	0018      	movs	r0, r3
 8001292:	2303      	movs	r3, #3
 8001294:	4003      	ands	r3, r0
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <NVIC_SetPriority+0xd8>)
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	430a      	orrs	r2, r1
 80012a6:	33c0      	adds	r3, #192	; 0xc0
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	501a      	str	r2, [r3, r0]
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b003      	add	sp, #12
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	e000e100 	.word	0xe000e100

080012bc <LL_APB1_GRP1_EnableClock>:
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80012c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <LL_IOP_GRP1_EnableClock>:
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <LL_IOP_GRP1_EnableClock+0x28>)
 80012f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <LL_IOP_GRP1_EnableClock+0x28>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <LL_IOP_GRP1_EnableClock+0x28>)
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <LL_USART_Enable>:
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2201      	movs	r2, #1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <LL_USART_ConfigAsyncMode>:
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <LL_USART_ConfigAsyncMode+0x2c>)
 800133e:	401a      	ands	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	222a      	movs	r2, #42	; 0x2a
 800134a:	4393      	bics	r3, r2
 800134c:	001a      	movs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	ffffb7ff 	.word	0xffffb7ff

08001360 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08f      	sub	sp, #60	; 0x3c
 8001364:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001366:	241c      	movs	r4, #28
 8001368:	193b      	adds	r3, r7, r4
 800136a:	0018      	movs	r0, r3
 800136c:	231c      	movs	r3, #28
 800136e:	001a      	movs	r2, r3
 8001370:	2100      	movs	r1, #0
 8001372:	f001 f84b 	bl	800240c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	0018      	movs	r0, r3
 800137a:	2318      	movs	r3, #24
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f001 f844 	bl	800240c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff97 	bl	80012bc <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff ffaa 	bl	80012e8 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2204      	movs	r2, #4
 8001398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2202      	movs	r2, #2
 800139e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2203      	movs	r2, #3
 80013a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2204      	movs	r2, #4
 80013b6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80013b8:	1d3a      	adds	r2, r7, #4
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f000 fa3f 	bl	8001844 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2208      	movs	r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2202      	movs	r2, #2
 80013d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2203      	movs	r2, #3
 80013d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2204      	movs	r2, #4
 80013e8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80013ea:	1d3a      	adds	r2, r7, #4
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	05db      	lsls	r3, r3, #23
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fa26 	bl	8001844 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	201c      	movs	r0, #28
 80013fc:	f7ff fef0 	bl	80011e0 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001400:	201c      	movs	r0, #28
 8001402:	f7ff fed7 	bl	80011b4 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001406:	193b      	adds	r3, r7, r4
 8001408:	22e1      	movs	r2, #225	; 0xe1
 800140a:	0252      	lsls	r2, r2, #9
 800140c:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800140e:	0021      	movs	r1, r4
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001422:	187b      	adds	r3, r7, r1
 8001424:	220c      	movs	r2, #12
 8001426:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001434:	187b      	adds	r3, r7, r1
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0xf8>)
 8001438:	0019      	movs	r1, r3
 800143a:	0010      	movs	r0, r2
 800143c:	f000 fefe 	bl	800223c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0xf8>)
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ff74 	bl	8001330 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <MX_USART2_UART_Init+0xf8>)
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff62 	bl	8001314 <LL_USART_Enable>

}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b00f      	add	sp, #60	; 0x3c
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	40004400 	.word	0x40004400

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001462:	e003      	b.n	800146c <LoopCopyDataInit>

08001464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800146a:	3104      	adds	r1, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <LoopForever+0xa>)
  ldr  r3, =_edata
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001474:	d3f6      	bcc.n	8001464 <CopyDataInit>
  ldr  r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001478:	e002      	b.n	8001480 <LoopFillZerobss>

0800147a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800147a:	2300      	movs	r3, #0
  str  r3, [r2]
 800147c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147e:	3204      	adds	r2, #4

08001480 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <LoopForever+0x16>)
  cmp  r2, r3
 8001482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001484:	d3f9      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001486:	f7ff fbd3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f000 ff9b 	bl	80023c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff f927 	bl	80006e0 <main>

08001492 <LoopForever>:

LoopForever:
    b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   r0, =_estack
 8001494:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001498:	08002dcc 	.word	0x08002dcc
  ldr  r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014a0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80014a4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80014a8:	200000a0 	.word	0x200000a0

080014ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_COMP_IRQHandler>
	...

080014b0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <LL_EXTI_EnableIT_0_31+0x1c>)
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <LL_EXTI_EnableIT_0_31+0x1c>)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010400 	.word	0x40010400

080014d0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <LL_EXTI_DisableIT_0_31+0x20>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	43d9      	mvns	r1, r3
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <LL_EXTI_DisableIT_0_31+0x20>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	40010400 	.word	0x40010400

080014f4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]

}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40010400 	.word	0x40010400

08001514 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <LL_EXTI_DisableEvent_0_31+0x20>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	43d9      	mvns	r1, r3
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001526:	400a      	ands	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40010400 	.word	0x40010400

08001538 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]

}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010400 	.word	0x40010400

08001558 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	43d9      	mvns	r1, r3
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800156a:	400a      	ands	r2, r1
 800156c:	609a      	str	r2, [r3, #8]

}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40010400 	.word	0x40010400

0800157c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001586:	68d9      	ldr	r1, [r3, #12]
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	430a      	orrs	r2, r1
 800158e:	60da      	str	r2, [r3, #12]
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40010400 	.word	0x40010400

0800159c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	60da      	str	r2, [r3, #12]
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	40010400 	.word	0x40010400

080015c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80015c8:	230f      	movs	r3, #15
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	791b      	ldrb	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <LL_EXTI_Init+0x1a>
 80015d8:	e068      	b.n	80016ac <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <LL_EXTI_Init+0x24>
 80015e2:	e06e      	b.n	80016c2 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	795b      	ldrb	r3, [r3, #5]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d01b      	beq.n	8001624 <LL_EXTI_Init+0x64>
 80015ec:	dc25      	bgt.n	800163a <LL_EXTI_Init+0x7a>
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <LL_EXTI_Init+0x38>
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00b      	beq.n	800160e <LL_EXTI_Init+0x4e>
 80015f6:	e020      	b.n	800163a <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff89 	bl	8001514 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff ff52 	bl	80014b0 <LL_EXTI_EnableIT_0_31>
          break;
 800160c:	e01a      	b.n	8001644 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff ff5c 	bl	80014d0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ff69 	bl	80014f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001622:	e00f      	b.n	8001644 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ff41 	bl	80014b0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff ff5e 	bl	80014f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001638:	e004      	b.n	8001644 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800163a:	230f      	movs	r3, #15
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
          break;
 8001642:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	799b      	ldrb	r3, [r3, #6]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d03a      	beq.n	80016c2 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	799b      	ldrb	r3, [r3, #6]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d01b      	beq.n	800168c <LL_EXTI_Init+0xcc>
 8001654:	dc25      	bgt.n	80016a2 <LL_EXTI_Init+0xe2>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d002      	beq.n	8001660 <LL_EXTI_Init+0xa0>
 800165a:	2b02      	cmp	r3, #2
 800165c:	d00b      	beq.n	8001676 <LL_EXTI_Init+0xb6>
 800165e:	e020      	b.n	80016a2 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ff99 	bl	800159c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff ff62 	bl	8001538 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001674:	e026      	b.n	80016c4 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff ff6c 	bl	8001558 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ff79 	bl	800157c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800168a:	e01b      	b.n	80016c4 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff ff51 	bl	8001538 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff ff6e 	bl	800157c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80016a0:	e010      	b.n	80016c4 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 80016a2:	230f      	movs	r3, #15
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
            break;
 80016aa:	e00b      	b.n	80016c4 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff0d 	bl	80014d0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff ff2a 	bl	8001514 <LL_EXTI_DisableEvent_0_31>
 80016c0:	e000      	b.n	80016c4 <LL_EXTI_Init+0x104>
      }
 80016c2:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b004      	add	sp, #16
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <LL_GPIO_SetPinMode>:
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	435b      	muls	r3, r3
 80016e6:	001a      	movs	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	189b      	adds	r3, r3, r2
 80016ee:	43db      	mvns	r3, r3
 80016f0:	400b      	ands	r3, r1
 80016f2:	001a      	movs	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	435b      	muls	r3, r3
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	434b      	muls	r3, r1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <LL_GPIO_SetPinOutputType>:
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	43d2      	mvns	r2, r2
 800171e:	401a      	ands	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	434b      	muls	r3, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}

08001734 <LL_GPIO_SetPinSpeed>:
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	435b      	muls	r3, r3
 8001748:	001a      	movs	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	189b      	adds	r3, r3, r2
 8001750:	43db      	mvns	r3, r3
 8001752:	400b      	ands	r3, r1
 8001754:	001a      	movs	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	435b      	muls	r3, r3
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	434b      	muls	r3, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bd80      	pop	{r7, pc}

0800176c <LL_GPIO_SetPinPull>:
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	68d9      	ldr	r1, [r3, #12]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	435b      	muls	r3, r3
 8001780:	001a      	movs	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	189b      	adds	r3, r3, r2
 8001788:	43db      	mvns	r3, r3
 800178a:	400b      	ands	r3, r1
 800178c:	001a      	movs	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	435b      	muls	r3, r3
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	434b      	muls	r3, r1
 8001796:	431a      	orrs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	60da      	str	r2, [r3, #12]
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b004      	add	sp, #16
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LL_GPIO_SetAFPin_0_7>:
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a19      	ldr	r1, [r3, #32]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	435b      	muls	r3, r3
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4353      	muls	r3, r2
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	435a      	muls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	43db      	mvns	r3, r3
 80017c8:	400b      	ands	r3, r1
 80017ca:	001a      	movs	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	435b      	muls	r3, r3
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	434b      	muls	r3, r1
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	434b      	muls	r3, r1
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	434b      	muls	r3, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	621a      	str	r2, [r3, #32]
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bd80      	pop	{r7, pc}

080017ea <LL_GPIO_SetAFPin_8_15>:
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	0a12      	lsrs	r2, r2, #8
 8001802:	4353      	muls	r3, r2
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	0a12      	lsrs	r2, r2, #8
 8001808:	4353      	muls	r3, r2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	0a12      	lsrs	r2, r2, #8
 800180e:	435a      	muls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	43db      	mvns	r3, r3
 8001818:	400b      	ands	r3, r1
 800181a:	001a      	movs	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	0a09      	lsrs	r1, r1, #8
 8001824:	434b      	muls	r3, r1
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	0a09      	lsrs	r1, r1, #8
 800182a:	434b      	muls	r3, r1
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	0a09      	lsrs	r1, r1, #8
 8001830:	434b      	muls	r3, r1
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	434b      	muls	r3, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bd80      	pop	{r7, pc}

08001844 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001856:	e048      	b.n	80018ea <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4091      	lsls	r1, r2
 8001862:	000a      	movs	r2, r1
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03a      	beq.n	80018e4 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d003      	beq.n	800187e <LL_GPIO_Init+0x3a>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d10e      	bne.n	800189c <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff ff54 	bl	8001734 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6819      	ldr	r1, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff ff37 	bl	800170a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff ff61 	bl	800176c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d111      	bne.n	80018d6 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2bff      	cmp	r3, #255	; 0xff
 80018b6:	d807      	bhi.n	80018c8 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ff6f 	bl	80017a4 <LL_GPIO_SetAFPin_0_7>
 80018c6:	e006      	b.n	80018d6 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff ff8a 	bl	80017ea <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff fef7 	bl	80016d2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	40da      	lsrs	r2, r3
 80018f2:	1e13      	subs	r3, r2, #0
 80018f4:	d1b0      	bne.n	8001858 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_RCC_HSI_IsReady>:
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <LL_RCC_HSI_IsReady+0x1c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2204      	movs	r2, #4
 800190a:	4013      	ands	r3, r2
 800190c:	2b04      	cmp	r3, #4
 800190e:	d101      	bne.n	8001914 <LL_RCC_HSI_IsReady+0x14>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <LL_RCC_HSI_IsReady+0x16>
 8001914:	2300      	movs	r3, #0
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000

08001920 <LL_RCC_LSE_IsReady>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <LL_RCC_LSE_IsReady+0x24>)
 8001926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	401a      	ands	r2, r3
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	429a      	cmp	r2, r3
 8001934:	d101      	bne.n	800193a <LL_RCC_LSE_IsReady+0x1a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_RCC_LSE_IsReady+0x1c>
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000

08001948 <LL_RCC_MSI_GetRange>:
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <LL_RCC_MSI_GetRange+0x14>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	23e0      	movs	r3, #224	; 0xe0
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	4013      	ands	r3, r2
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <LL_RCC_GetSysClkSource>:
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <LL_RCC_GetSysClkSource+0x14>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	220c      	movs	r2, #12
 800196a:	4013      	ands	r3, r2
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	40021000 	.word	0x40021000

08001978 <LL_RCC_GetAHBPrescaler>:
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <LL_RCC_GetAHBPrescaler+0x14>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	22f0      	movs	r2, #240	; 0xf0
 8001982:	4013      	ands	r3, r2
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_GetAPB1Prescaler>:
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	23e0      	movs	r3, #224	; 0xe0
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4013      	ands	r3, r2
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <LL_RCC_GetAPB2Prescaler>:
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <LL_RCC_GetAPB2Prescaler+0x14>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	23e0      	movs	r3, #224	; 0xe0
 80019b2:	019b      	lsls	r3, r3, #6
 80019b4:	4013      	ands	r3, r2
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <LL_RCC_GetUSARTClockSource+0x20>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	401a      	ands	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	4313      	orrs	r3, r2
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40021000 	.word	0x40021000

080019e4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <LL_RCC_PLL_GetMainSource+0x14>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	025b      	lsls	r3, r3, #9
 80019f0:	4013      	ands	r3, r2
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000

080019fc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	23f0      	movs	r3, #240	; 0xf0
 8001a06:	039b      	lsls	r3, r3, #14
 8001a08:	4013      	ands	r3, r2
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000

08001a14 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <LL_RCC_PLL_GetDivider+0x14>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	23c0      	movs	r3, #192	; 0xc0
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	4013      	ands	r3, r2
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000

08001a2c <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2210      	movs	r2, #16
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d101      	bne.n	8001a40 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000

08001a4c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d139      	bne.n	8001ad2 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ffad 	bl	80019c0 <LL_RCC_GetUSARTClockSource>
 8001a66:	0003      	movs	r3, r0
 8001a68:	4a40      	ldr	r2, [pc, #256]	; (8001b6c <LL_RCC_GetUSARTClockFreq+0x120>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01c      	beq.n	8001aa8 <LL_RCC_GetUSARTClockFreq+0x5c>
 8001a6e:	4a3f      	ldr	r2, [pc, #252]	; (8001b6c <LL_RCC_GetUSARTClockFreq+0x120>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d821      	bhi.n	8001ab8 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001a74:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <LL_RCC_GetUSARTClockFreq+0x124>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d003      	beq.n	8001a82 <LL_RCC_GetUSARTClockFreq+0x36>
 8001a7a:	4a3e      	ldr	r2, [pc, #248]	; (8001b74 <LL_RCC_GetUSARTClockFreq+0x128>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d005      	beq.n	8001a8c <LL_RCC_GetUSARTClockFreq+0x40>
 8001a80:	e01a      	b.n	8001ab8 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001a82:	f000 f883 	bl	8001b8c <RCC_GetSystemClockFreq>
 8001a86:	0003      	movs	r3, r0
 8001a88:	60fb      	str	r3, [r7, #12]
        break;
 8001a8a:	e027      	b.n	8001adc <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001a8c:	f7ff ff38 	bl	8001900 <LL_RCC_HSI_IsReady>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d020      	beq.n	8001ad6 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001a94:	f7ff ffca 	bl	8001a2c <LL_RCC_IsActiveFlag_HSIDIV>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d002      	beq.n	8001aa2 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8001a9e:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001aa0:	e019      	b.n	8001ad6 <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <LL_RCC_GetUSARTClockFreq+0x130>)
 8001aa4:	60fb      	str	r3, [r7, #12]
        break;
 8001aa6:	e016      	b.n	8001ad6 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001aa8:	f7ff ff3a 	bl	8001920 <LL_RCC_LSE_IsReady>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d014      	beq.n	8001ada <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ab6:	e010      	b.n	8001ada <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ab8:	f000 f868 	bl	8001b8c <RCC_GetSystemClockFreq>
 8001abc:	0003      	movs	r3, r0
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 f8a8 	bl	8001c14 <RCC_GetHCLKClockFreq>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 f8ce 	bl	8001c68 <RCC_GetPCLK2ClockFreq>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]
        break;
 8001ad0:	e004      	b.n	8001adc <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	e002      	b.n	8001adc <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	e000      	b.n	8001adc <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8001ada:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d139      	bne.n	8001b56 <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff ff6b 	bl	80019c0 <LL_RCC_GetUSARTClockSource>
 8001aea:	0003      	movs	r3, r0
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <LL_RCC_GetUSARTClockFreq+0x134>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01c      	beq.n	8001b2c <LL_RCC_GetUSARTClockFreq+0xe0>
 8001af2:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <LL_RCC_GetUSARTClockFreq+0x134>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d821      	bhi.n	8001b3c <LL_RCC_GetUSARTClockFreq+0xf0>
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <LL_RCC_GetUSARTClockFreq+0x138>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d003      	beq.n	8001b06 <LL_RCC_GetUSARTClockFreq+0xba>
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <LL_RCC_GetUSARTClockFreq+0x13c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d005      	beq.n	8001b10 <LL_RCC_GetUSARTClockFreq+0xc4>
 8001b04:	e01a      	b.n	8001b3c <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001b06:	f000 f841 	bl	8001b8c <RCC_GetSystemClockFreq>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	60fb      	str	r3, [r7, #12]
        break;
 8001b0e:	e027      	b.n	8001b60 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001b10:	f7ff fef6 	bl	8001900 <LL_RCC_HSI_IsReady>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d020      	beq.n	8001b5a <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001b18:	f7ff ff88 	bl	8001a2c <LL_RCC_IsActiveFlag_HSIDIV>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d002      	beq.n	8001b26 <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8001b22:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001b24:	e019      	b.n	8001b5a <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <LL_RCC_GetUSARTClockFreq+0x130>)
 8001b28:	60fb      	str	r3, [r7, #12]
        break;
 8001b2a:	e016      	b.n	8001b5a <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001b2c:	f7ff fef8 	bl	8001920 <LL_RCC_LSE_IsReady>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d014      	beq.n	8001b5e <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001b3a:	e010      	b.n	8001b5e <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001b3c:	f000 f826 	bl	8001b8c <RCC_GetSystemClockFreq>
 8001b40:	0003      	movs	r3, r0
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f866 	bl	8001c14 <RCC_GetHCLKClockFreq>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f878 	bl	8001c40 <RCC_GetPCLK1ClockFreq>
 8001b50:	0003      	movs	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]
        break;
 8001b54:	e004      	b.n	8001b60 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	e002      	b.n	8001b60 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	e000      	b.n	8001b60 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8001b5e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001b60:	68fb      	ldr	r3, [r7, #12]
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	00030003 	.word	0x00030003
 8001b70:	00030001 	.word	0x00030001
 8001b74:	00030002 	.word	0x00030002
 8001b78:	003d0900 	.word	0x003d0900
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	000c000c 	.word	0x000c000c
 8001b84:	000c0004 	.word	0x000c0004
 8001b88:	000c0008 	.word	0x000c0008

08001b8c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b92:	f7ff fee5 	bl	8001960 <LL_RCC_GetSysClkSource>
 8001b96:	0003      	movs	r3, r0
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d020      	beq.n	8001bde <RCC_GetSystemClockFreq+0x52>
 8001b9c:	d824      	bhi.n	8001be8 <RCC_GetSystemClockFreq+0x5c>
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d01a      	beq.n	8001bd8 <RCC_GetSystemClockFreq+0x4c>
 8001ba2:	d821      	bhi.n	8001be8 <RCC_GetSystemClockFreq+0x5c>
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <RCC_GetSystemClockFreq+0x22>
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d00b      	beq.n	8001bc4 <RCC_GetSystemClockFreq+0x38>
 8001bac:	e01c      	b.n	8001be8 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001bae:	f7ff fecb 	bl	8001948 <LL_RCC_MSI_GetRange>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	0b5b      	lsrs	r3, r3, #13
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	607b      	str	r3, [r7, #4]
      break;
 8001bc2:	e01c      	b.n	8001bfe <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001bc4:	f7ff ff32 	bl	8001a2c <LL_RCC_IsActiveFlag_HSIDIV>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d002      	beq.n	8001bd2 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <RCC_GetSystemClockFreq+0x7c>)
 8001bce:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001bd0:	e015      	b.n	8001bfe <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <RCC_GetSystemClockFreq+0x80>)
 8001bd4:	607b      	str	r3, [r7, #4]
      break;
 8001bd6:	e012      	b.n	8001bfe <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <RCC_GetSystemClockFreq+0x84>)
 8001bda:	607b      	str	r3, [r7, #4]
      break;
 8001bdc:	e00f      	b.n	8001bfe <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001bde:	f000 f857 	bl	8001c90 <RCC_PLL_GetFreqDomain_SYS>
 8001be2:	0003      	movs	r3, r0
 8001be4:	607b      	str	r3, [r7, #4]
      break;
 8001be6:	e00a      	b.n	8001bfe <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001be8:	f7ff feae 	bl	8001948 <LL_RCC_MSI_GetRange>
 8001bec:	0003      	movs	r3, r0
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0212      	lsls	r2, r2, #8
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	607b      	str	r3, [r7, #4]
      break;
 8001bfc:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	003d0900 	.word	0x003d0900
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200

08001c14 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c1c:	f7ff feac 	bl	8001978 <LL_RCC_GetAHBPrescaler>
 8001c20:	0003      	movs	r3, r0
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	220f      	movs	r2, #15
 8001c26:	4013      	ands	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <RCC_GetHCLKClockFreq+0x28>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	40d3      	lsrs	r3, r2
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	08002d2c 	.word	0x08002d2c

08001c40 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c48:	f7ff fea2 	bl	8001990 <LL_RCC_GetAPB1Prescaler>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <RCC_GetPCLK1ClockFreq+0x24>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	001a      	movs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	40d3      	lsrs	r3, r2
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	08002d3c 	.word	0x08002d3c

08001c68 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c70:	f7ff fe9a 	bl	80019a8 <LL_RCC_GetAPB2Prescaler>
 8001c74:	0003      	movs	r3, r0
 8001c76:	0adb      	lsrs	r3, r3, #11
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <RCC_GetPCLK2ClockFreq+0x24>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	40d3      	lsrs	r3, r2
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	08002d3c 	.word	0x08002d3c

08001c90 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c96:	f7ff fea5 	bl	80019e4 <LL_RCC_PLL_GetMainSource>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001ca4:	f7ff fec2 	bl	8001a2c <LL_RCC_IsActiveFlag_HSIDIV>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d002      	beq.n	8001cb2 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001cae:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001cb0:	e005      	b.n	8001cbe <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001cb4:	607b      	str	r3, [r7, #4]
      break;
 8001cb6:	e002      	b.n	8001cbe <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001cba:	607b      	str	r3, [r7, #4]
      break;
 8001cbc:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001cbe:	f7ff fe9d 	bl	80019fc <LL_RCC_PLL_GetMultiplicator>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	001a      	movs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4353      	muls	r3, r2
 8001cd0:	001c      	movs	r4, r3
 8001cd2:	f7ff fe9f 	bl	8001a14 <LL_RCC_PLL_GetDivider>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	0d9b      	lsrs	r3, r3, #22
 8001cda:	3301      	adds	r3, #1
 8001cdc:	0019      	movs	r1, r3
 8001cde:	0020      	movs	r0, r4
 8001ce0:	f7fe fa12 	bl	8000108 <__udivsi3>
 8001ce4:	0003      	movs	r3, r0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b003      	add	sp, #12
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	003d0900 	.word	0x003d0900
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200
 8001cfc:	08002d44 	.word	0x08002d44

08001d00 <LL_TIM_SetPrescaler>:
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <LL_TIM_SetAutoReload>:
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <LL_TIM_OC_SetCompareCH1>:
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LL_TIM_OC_SetCompareCH2>:
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <LL_TIM_OC_SetCompareCH3>:
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <LL_TIM_OC_SetCompareCH4>:
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	615a      	str	r2, [r3, #20]
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	05db      	lsls	r3, r3, #23
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d007      	beq.n	8001dd6 <LL_TIM_Init+0x2a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <LL_TIM_Init+0x98>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <LL_TIM_Init+0x2a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <LL_TIM_Init+0x9c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d107      	bne.n	8001de6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2270      	movs	r2, #112	; 0x70
 8001dda:	4393      	bics	r3, r2
 8001ddc:	001a      	movs	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	05db      	lsls	r3, r3, #23
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d007      	beq.n	8001e00 <LL_TIM_Init+0x54>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <LL_TIM_Init+0x98>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <LL_TIM_Init+0x54>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <LL_TIM_Init+0x9c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d106      	bne.n	8001e0e <LL_TIM_Init+0x62>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <LL_TIM_Init+0xa0>)
 8001e04:	401a      	ands	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff7b 	bl	8001d18 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	001a      	movs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff ff67 	bl	8001d00 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff ffab 	bl	8001d90 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40010800 	.word	0x40010800
 8001e48:	40011400 	.word	0x40011400
 8001e4c:	fffffcff 	.word	0xfffffcff

08001e50 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001e5c:	2317      	movs	r3, #23
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	015b      	lsls	r3, r3, #5
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d036      	beq.n	8001edc <LL_TIM_OC_Init+0x8c>
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d83c      	bhi.n	8001ef2 <LL_TIM_OC_Init+0xa2>
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d021      	beq.n	8001ec6 <LL_TIM_OC_Init+0x76>
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d832      	bhi.n	8001ef2 <LL_TIM_OC_Init+0xa2>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d003      	beq.n	8001e9a <LL_TIM_OC_Init+0x4a>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d00b      	beq.n	8001eb0 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001e98:	e02b      	b.n	8001ef2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001e9a:	2317      	movs	r3, #23
 8001e9c:	18fc      	adds	r4, r7, r3
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f82c 	bl	8001f02 <OC1Config>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	7023      	strb	r3, [r4, #0]
      break;
 8001eae:	e021      	b.n	8001ef4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001eb0:	2317      	movs	r3, #23
 8001eb2:	18fc      	adds	r4, r7, r3
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 f868 	bl	8001f90 <OC2Config>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	7023      	strb	r3, [r4, #0]
      break;
 8001ec4:	e016      	b.n	8001ef4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001ec6:	2317      	movs	r3, #23
 8001ec8:	18fc      	adds	r4, r7, r3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0011      	movs	r1, r2
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f8a9 	bl	8002028 <OC3Config>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	7023      	strb	r3, [r4, #0]
      break;
 8001eda:	e00b      	b.n	8001ef4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001edc:	2317      	movs	r3, #23
 8001ede:	18fc      	adds	r4, r7, r3
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0011      	movs	r1, r2
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f8e8 	bl	80020bc <OC4Config>
 8001eec:	0003      	movs	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]
      break;
 8001ef0:	e000      	b.n	8001ef4 <LL_TIM_OC_Init+0xa4>
      break;
 8001ef2:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001ef4:	2317      	movs	r3, #23
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	781b      	ldrb	r3, [r3, #0]
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b007      	add	sp, #28
 8001f00:	bd90      	pop	{r4, r7, pc}

08001f02 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4393      	bics	r3, r2
 8001f14:	001a      	movs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	4393      	bics	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2270      	movs	r2, #112	; 0x70
 8001f38:	4393      	bics	r3, r2
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2202      	movs	r2, #2
 8001f48:	4393      	bics	r3, r2
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4393      	bics	r3, r2
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff fed9 	bl	8001d30 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b006      	add	sp, #24
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <OC2Config+0x90>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <OC2Config+0x94>)
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	4393      	bics	r3, r2
 8001fd8:	001a      	movs	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	4393      	bics	r3, r2
 8001fea:	001a      	movs	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f7ff fe9c 	bl	8001d48 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002016:	2300      	movs	r3, #0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b006      	add	sp, #24
 800201e:	bd80      	pop	{r7, pc}
 8002020:	fffffcff 	.word	0xfffffcff
 8002024:	ffff8fff 	.word	0xffff8fff

08002028 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <OC3Config+0x8c>)
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2203      	movs	r2, #3
 8002054:	4393      	bics	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2270      	movs	r2, #112	; 0x70
 800205c:	4393      	bics	r3, r2
 800205e:	001a      	movs	r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <OC3Config+0x90>)
 800206c:	401a      	ands	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <OC3Config+0x8c>)
 800207c:	401a      	ands	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff fe5f 	bl	8001d60 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b006      	add	sp, #24
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	fffffeff 	.word	0xfffffeff
 80020b8:	fffffdff 	.word	0xfffffdff

080020bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <OC4Config+0x8c>)
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <OC4Config+0x90>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <OC4Config+0x94>)
 80020f0:	401a      	ands	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <OC4Config+0x98>)
 8002100:	401a      	ands	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	031b      	lsls	r3, r3, #12
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <OC4Config+0x8c>)
 8002110:	401a      	ands	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	031b      	lsls	r3, r3, #12
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0011      	movs	r1, r2
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff fe21 	bl	8001d78 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b006      	add	sp, #24
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	ffffefff 	.word	0xffffefff
 800214c:	fffffcff 	.word	0xfffffcff
 8002150:	ffff8fff 	.word	0xffff8fff
 8002154:	ffffdfff 	.word	0xffffdfff

08002158 <LL_USART_IsEnabled>:
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <LL_USART_IsEnabled+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_USART_IsEnabled+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <LL_USART_SetStopBitsLength>:
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <LL_USART_SetStopBitsLength+0x24>)
 800218c:	401a      	ands	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	605a      	str	r2, [r3, #4]
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	ffffcfff 	.word	0xffffcfff

080021a4 <LL_USART_SetHWFlowCtrl>:
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <LL_USART_SetHWFlowCtrl+0x24>)
 80021b4:	401a      	ands	r2, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	609a      	str	r2, [r3, #8]
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	fffffcff 	.word	0xfffffcff

080021cc <LL_USART_SetBaudRate>:
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d117      	bne.n	8002214 <LL_USART_SetBaudRate+0x48>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	005a      	lsls	r2, r3, #1
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7fd ff89 	bl	8000108 <__udivsi3>
 80021f6:	0003      	movs	r3, r0
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <LL_USART_SetBaudRate+0x6c>)
 80021fe:	402b      	ands	r3, r5
 8002200:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002202:	086b      	lsrs	r3, r5, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	001a      	movs	r2, r3
 8002208:	2307      	movs	r3, #7
 800220a:	4013      	ands	r3, r2
 800220c:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	60dc      	str	r4, [r3, #12]
}
 8002212:	e00c      	b.n	800222e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	085a      	lsrs	r2, r3, #1
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	0018      	movs	r0, r3
 8002220:	f7fd ff72 	bl	8000108 <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	b29b      	uxth	r3, r3
 8002228:	001a      	movs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	60da      	str	r2, [r3, #12]
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	0000fff0 	.word	0x0000fff0

0800223c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002246:	230f      	movs	r3, #15
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff7f 	bl	8002158 <LL_USART_IsEnabled>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d145      	bne.n	80022ea <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <LL_USART_Init+0xbc>)
 8002264:	401a      	ands	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4319      	orrs	r1, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	4319      	orrs	r1, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	430b      	orrs	r3, r1
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0011      	movs	r1, r2
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff ff76 	bl	800217c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff ff83 	bl	80021a4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <LL_USART_Init+0xc0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80022a6:	2003      	movs	r0, #3
 80022a8:	f7ff fbd0 	bl	8001a4c <LL_RCC_GetUSARTClockFreq>
 80022ac:	0003      	movs	r3, r0
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	e008      	b.n	80022c4 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <LL_USART_Init+0xc4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d104      	bne.n	80022c4 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80022ba:	200c      	movs	r0, #12
 80022bc:	f7ff fbc6 	bl	8001a4c <LL_RCC_GetUSARTClockFreq>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00f      	beq.n	80022ea <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 80022d2:	230f      	movs	r3, #15
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff71 	bl	80021cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80022ea:	230f      	movs	r3, #15
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	781b      	ldrb	r3, [r3, #0]
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b004      	add	sp, #16
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	efff69f3 	.word	0xefff69f3
 80022fc:	40013800 	.word	0x40013800
 8002300:	40004400 	.word	0x40004400

08002304 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fd fef9 	bl	8000108 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	001a      	movs	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <LL_InitTick+0x30>)
 800231c:	3a01      	subs	r2, #1
 800231e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <LL_InitTick+0x30>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b03      	ldr	r3, [pc, #12]	; (8002334 <LL_InitTick+0x30>)
 8002328:	2205      	movs	r2, #5
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}
 8002334:	e000e010 	.word	0xe000e010

08002338 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002340:	23fa      	movs	r3, #250	; 0xfa
 8002342:	009a      	lsls	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ffdb 	bl	8002304 <LL_InitTick>
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <LL_mDelay+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002366:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	d00c      	beq.n	8002388 <LL_mDelay+0x30>
  {
    Delay++;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002374:	e008      	b.n	8002388 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <LL_mDelay+0x40>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	025b      	lsls	r3, r3, #9
 800237e:	4013      	ands	r3, r2
 8002380:	d002      	beq.n	8002388 <LL_mDelay+0x30>
    {
      Delay--;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3b01      	subs	r3, #1
 8002386:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f3      	bne.n	8002376 <LL_mDelay+0x1e>
    }
  }
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	e000e010 	.word	0xe000e010

0800239c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <LL_SetSystemCoreClock+0x18>)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	20000000 	.word	0x20000000

080023b8 <__errno>:
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <__errno+0x8>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	4770      	bx	lr
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	20000004 	.word	0x20000004

080023c4 <__libc_init_array>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	2600      	movs	r6, #0
 80023c8:	4d0c      	ldr	r5, [pc, #48]	; (80023fc <__libc_init_array+0x38>)
 80023ca:	4c0d      	ldr	r4, [pc, #52]	; (8002400 <__libc_init_array+0x3c>)
 80023cc:	1b64      	subs	r4, r4, r5
 80023ce:	10a4      	asrs	r4, r4, #2
 80023d0:	42a6      	cmp	r6, r4
 80023d2:	d109      	bne.n	80023e8 <__libc_init_array+0x24>
 80023d4:	2600      	movs	r6, #0
 80023d6:	f000 fc9d 	bl	8002d14 <_init>
 80023da:	4d0a      	ldr	r5, [pc, #40]	; (8002404 <__libc_init_array+0x40>)
 80023dc:	4c0a      	ldr	r4, [pc, #40]	; (8002408 <__libc_init_array+0x44>)
 80023de:	1b64      	subs	r4, r4, r5
 80023e0:	10a4      	asrs	r4, r4, #2
 80023e2:	42a6      	cmp	r6, r4
 80023e4:	d105      	bne.n	80023f2 <__libc_init_array+0x2e>
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	00b3      	lsls	r3, r6, #2
 80023ea:	58eb      	ldr	r3, [r5, r3]
 80023ec:	4798      	blx	r3
 80023ee:	3601      	adds	r6, #1
 80023f0:	e7ee      	b.n	80023d0 <__libc_init_array+0xc>
 80023f2:	00b3      	lsls	r3, r6, #2
 80023f4:	58eb      	ldr	r3, [r5, r3]
 80023f6:	4798      	blx	r3
 80023f8:	3601      	adds	r6, #1
 80023fa:	e7f2      	b.n	80023e2 <__libc_init_array+0x1e>
 80023fc:	08002dc4 	.word	0x08002dc4
 8002400:	08002dc4 	.word	0x08002dc4
 8002404:	08002dc4 	.word	0x08002dc4
 8002408:	08002dc8 	.word	0x08002dc8

0800240c <memset>:
 800240c:	0003      	movs	r3, r0
 800240e:	1882      	adds	r2, r0, r2
 8002410:	4293      	cmp	r3, r2
 8002412:	d100      	bne.n	8002416 <memset+0xa>
 8002414:	4770      	bx	lr
 8002416:	7019      	strb	r1, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	e7f9      	b.n	8002410 <memset+0x4>

0800241c <setvbuf>:
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	001d      	movs	r5, r3
 8002420:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <setvbuf+0x17c>)
 8002422:	b085      	sub	sp, #20
 8002424:	681e      	ldr	r6, [r3, #0]
 8002426:	0004      	movs	r4, r0
 8002428:	000f      	movs	r7, r1
 800242a:	9200      	str	r2, [sp, #0]
 800242c:	2e00      	cmp	r6, #0
 800242e:	d005      	beq.n	800243c <setvbuf+0x20>
 8002430:	69b3      	ldr	r3, [r6, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <setvbuf+0x20>
 8002436:	0030      	movs	r0, r6
 8002438:	f000 f9e6 	bl	8002808 <__sinit>
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <setvbuf+0x180>)
 800243e:	429c      	cmp	r4, r3
 8002440:	d161      	bne.n	8002506 <setvbuf+0xea>
 8002442:	6874      	ldr	r4, [r6, #4]
 8002444:	9b00      	ldr	r3, [sp, #0]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d005      	beq.n	8002456 <setvbuf+0x3a>
 800244a:	2b01      	cmp	r3, #1
 800244c:	d900      	bls.n	8002450 <setvbuf+0x34>
 800244e:	e09d      	b.n	800258c <setvbuf+0x170>
 8002450:	2d00      	cmp	r5, #0
 8002452:	da00      	bge.n	8002456 <setvbuf+0x3a>
 8002454:	e09a      	b.n	800258c <setvbuf+0x170>
 8002456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002458:	07db      	lsls	r3, r3, #31
 800245a:	d405      	bmi.n	8002468 <setvbuf+0x4c>
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	059b      	lsls	r3, r3, #22
 8002460:	d402      	bmi.n	8002468 <setvbuf+0x4c>
 8002462:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002464:	f000 fa71 	bl	800294a <__retarget_lock_acquire_recursive>
 8002468:	0021      	movs	r1, r4
 800246a:	0030      	movs	r0, r6
 800246c:	f000 f92a 	bl	80026c4 <_fflush_r>
 8002470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002472:	2900      	cmp	r1, #0
 8002474:	d008      	beq.n	8002488 <setvbuf+0x6c>
 8002476:	0023      	movs	r3, r4
 8002478:	3344      	adds	r3, #68	; 0x44
 800247a:	4299      	cmp	r1, r3
 800247c:	d002      	beq.n	8002484 <setvbuf+0x68>
 800247e:	0030      	movs	r0, r6
 8002480:	f000 fa98 	bl	80029b4 <_free_r>
 8002484:	2300      	movs	r3, #0
 8002486:	6363      	str	r3, [r4, #52]	; 0x34
 8002488:	2300      	movs	r3, #0
 800248a:	61a3      	str	r3, [r4, #24]
 800248c:	6063      	str	r3, [r4, #4]
 800248e:	89a3      	ldrh	r3, [r4, #12]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	d503      	bpl.n	800249c <setvbuf+0x80>
 8002494:	0030      	movs	r0, r6
 8002496:	6921      	ldr	r1, [r4, #16]
 8002498:	f000 fa8c 	bl	80029b4 <_free_r>
 800249c:	89a3      	ldrh	r3, [r4, #12]
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <setvbuf+0x184>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	81a3      	strh	r3, [r4, #12]
 80024a4:	9b00      	ldr	r3, [sp, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d100      	bne.n	80024ac <setvbuf+0x90>
 80024aa:	e069      	b.n	8002580 <setvbuf+0x164>
 80024ac:	ab03      	add	r3, sp, #12
 80024ae:	0021      	movs	r1, r4
 80024b0:	0030      	movs	r0, r6
 80024b2:	aa02      	add	r2, sp, #8
 80024b4:	f000 fa4c 	bl	8002950 <__swhatbuf_r>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	4303      	orrs	r3, r0
 80024bc:	81a3      	strh	r3, [r4, #12]
 80024be:	2d00      	cmp	r5, #0
 80024c0:	d12b      	bne.n	800251a <setvbuf+0xfe>
 80024c2:	9d02      	ldr	r5, [sp, #8]
 80024c4:	0028      	movs	r0, r5
 80024c6:	f000 fa6b 	bl	80029a0 <malloc>
 80024ca:	1e07      	subs	r7, r0, #0
 80024cc:	d153      	bne.n	8002576 <setvbuf+0x15a>
 80024ce:	9b02      	ldr	r3, [sp, #8]
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	42ab      	cmp	r3, r5
 80024d4:	d149      	bne.n	800256a <setvbuf+0x14e>
 80024d6:	2501      	movs	r5, #1
 80024d8:	426d      	negs	r5, r5
 80024da:	2302      	movs	r3, #2
 80024dc:	89a2      	ldrh	r2, [r4, #12]
 80024de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80024e0:	4313      	orrs	r3, r2
 80024e2:	2200      	movs	r2, #0
 80024e4:	60a2      	str	r2, [r4, #8]
 80024e6:	0022      	movs	r2, r4
 80024e8:	3247      	adds	r2, #71	; 0x47
 80024ea:	6022      	str	r2, [r4, #0]
 80024ec:	6122      	str	r2, [r4, #16]
 80024ee:	2201      	movs	r2, #1
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	6162      	str	r2, [r4, #20]
 80024f6:	4211      	tst	r1, r2
 80024f8:	d134      	bne.n	8002564 <setvbuf+0x148>
 80024fa:	059b      	lsls	r3, r3, #22
 80024fc:	d432      	bmi.n	8002564 <setvbuf+0x148>
 80024fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002500:	f000 fa24 	bl	800294c <__retarget_lock_release_recursive>
 8002504:	e02e      	b.n	8002564 <setvbuf+0x148>
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <setvbuf+0x188>)
 8002508:	429c      	cmp	r4, r3
 800250a:	d101      	bne.n	8002510 <setvbuf+0xf4>
 800250c:	68b4      	ldr	r4, [r6, #8]
 800250e:	e799      	b.n	8002444 <setvbuf+0x28>
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <setvbuf+0x18c>)
 8002512:	429c      	cmp	r4, r3
 8002514:	d196      	bne.n	8002444 <setvbuf+0x28>
 8002516:	68f4      	ldr	r4, [r6, #12]
 8002518:	e794      	b.n	8002444 <setvbuf+0x28>
 800251a:	2f00      	cmp	r7, #0
 800251c:	d0d2      	beq.n	80024c4 <setvbuf+0xa8>
 800251e:	69b3      	ldr	r3, [r6, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <setvbuf+0x10e>
 8002524:	0030      	movs	r0, r6
 8002526:	f000 f96f 	bl	8002808 <__sinit>
 800252a:	9b00      	ldr	r3, [sp, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <setvbuf+0x11a>
 8002530:	89a2      	ldrh	r2, [r4, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	81a3      	strh	r3, [r4, #12]
 8002536:	89a2      	ldrh	r2, [r4, #12]
 8002538:	2308      	movs	r3, #8
 800253a:	0011      	movs	r1, r2
 800253c:	6027      	str	r7, [r4, #0]
 800253e:	6127      	str	r7, [r4, #16]
 8002540:	6165      	str	r5, [r4, #20]
 8002542:	4019      	ands	r1, r3
 8002544:	421a      	tst	r2, r3
 8002546:	d01f      	beq.n	8002588 <setvbuf+0x16c>
 8002548:	07d3      	lsls	r3, r2, #31
 800254a:	d51b      	bpl.n	8002584 <setvbuf+0x168>
 800254c:	2300      	movs	r3, #0
 800254e:	426d      	negs	r5, r5
 8002550:	60a3      	str	r3, [r4, #8]
 8002552:	61a5      	str	r5, [r4, #24]
 8002554:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002556:	2301      	movs	r3, #1
 8002558:	000d      	movs	r5, r1
 800255a:	401d      	ands	r5, r3
 800255c:	4219      	tst	r1, r3
 800255e:	d118      	bne.n	8002592 <setvbuf+0x176>
 8002560:	0593      	lsls	r3, r2, #22
 8002562:	d5cc      	bpl.n	80024fe <setvbuf+0xe2>
 8002564:	0028      	movs	r0, r5
 8002566:	b005      	add	sp, #20
 8002568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256a:	9801      	ldr	r0, [sp, #4]
 800256c:	f000 fa18 	bl	80029a0 <malloc>
 8002570:	9d01      	ldr	r5, [sp, #4]
 8002572:	1e07      	subs	r7, r0, #0
 8002574:	d0af      	beq.n	80024d6 <setvbuf+0xba>
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	89a2      	ldrh	r2, [r4, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	81a3      	strh	r3, [r4, #12]
 800257e:	e7ce      	b.n	800251e <setvbuf+0x102>
 8002580:	2500      	movs	r5, #0
 8002582:	e7aa      	b.n	80024da <setvbuf+0xbe>
 8002584:	60a5      	str	r5, [r4, #8]
 8002586:	e7e5      	b.n	8002554 <setvbuf+0x138>
 8002588:	60a1      	str	r1, [r4, #8]
 800258a:	e7e3      	b.n	8002554 <setvbuf+0x138>
 800258c:	2501      	movs	r5, #1
 800258e:	426d      	negs	r5, r5
 8002590:	e7e8      	b.n	8002564 <setvbuf+0x148>
 8002592:	2500      	movs	r5, #0
 8002594:	e7e6      	b.n	8002564 <setvbuf+0x148>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	20000004 	.word	0x20000004
 800259c:	08002d84 	.word	0x08002d84
 80025a0:	fffff35c 	.word	0xfffff35c
 80025a4:	08002da4 	.word	0x08002da4
 80025a8:	08002d64 	.word	0x08002d64

080025ac <__sflush_r>:
 80025ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ae:	898b      	ldrh	r3, [r1, #12]
 80025b0:	0005      	movs	r5, r0
 80025b2:	000c      	movs	r4, r1
 80025b4:	071a      	lsls	r2, r3, #28
 80025b6:	d45f      	bmi.n	8002678 <__sflush_r+0xcc>
 80025b8:	684a      	ldr	r2, [r1, #4]
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	dc04      	bgt.n	80025c8 <__sflush_r+0x1c>
 80025be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	dc01      	bgt.n	80025c8 <__sflush_r+0x1c>
 80025c4:	2000      	movs	r0, #0
 80025c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80025ca:	2f00      	cmp	r7, #0
 80025cc:	d0fa      	beq.n	80025c4 <__sflush_r+0x18>
 80025ce:	2200      	movs	r2, #0
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	682e      	ldr	r6, [r5, #0]
 80025d4:	602a      	str	r2, [r5, #0]
 80025d6:	001a      	movs	r2, r3
 80025d8:	0149      	lsls	r1, r1, #5
 80025da:	400a      	ands	r2, r1
 80025dc:	420b      	tst	r3, r1
 80025de:	d034      	beq.n	800264a <__sflush_r+0x9e>
 80025e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	075b      	lsls	r3, r3, #29
 80025e6:	d506      	bpl.n	80025f6 <__sflush_r+0x4a>
 80025e8:	6863      	ldr	r3, [r4, #4]
 80025ea:	1ac0      	subs	r0, r0, r3
 80025ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <__sflush_r+0x4a>
 80025f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f4:	1ac0      	subs	r0, r0, r3
 80025f6:	0002      	movs	r2, r0
 80025f8:	6a21      	ldr	r1, [r4, #32]
 80025fa:	2300      	movs	r3, #0
 80025fc:	0028      	movs	r0, r5
 80025fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002600:	47b8      	blx	r7
 8002602:	89a1      	ldrh	r1, [r4, #12]
 8002604:	1c43      	adds	r3, r0, #1
 8002606:	d106      	bne.n	8002616 <__sflush_r+0x6a>
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	2b1d      	cmp	r3, #29
 800260c:	d831      	bhi.n	8002672 <__sflush_r+0xc6>
 800260e:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <__sflush_r+0x114>)
 8002610:	40da      	lsrs	r2, r3
 8002612:	07d3      	lsls	r3, r2, #31
 8002614:	d52d      	bpl.n	8002672 <__sflush_r+0xc6>
 8002616:	2300      	movs	r3, #0
 8002618:	6063      	str	r3, [r4, #4]
 800261a:	6923      	ldr	r3, [r4, #16]
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	04cb      	lsls	r3, r1, #19
 8002620:	d505      	bpl.n	800262e <__sflush_r+0x82>
 8002622:	1c43      	adds	r3, r0, #1
 8002624:	d102      	bne.n	800262c <__sflush_r+0x80>
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d100      	bne.n	800262e <__sflush_r+0x82>
 800262c:	6560      	str	r0, [r4, #84]	; 0x54
 800262e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002630:	602e      	str	r6, [r5, #0]
 8002632:	2900      	cmp	r1, #0
 8002634:	d0c6      	beq.n	80025c4 <__sflush_r+0x18>
 8002636:	0023      	movs	r3, r4
 8002638:	3344      	adds	r3, #68	; 0x44
 800263a:	4299      	cmp	r1, r3
 800263c:	d002      	beq.n	8002644 <__sflush_r+0x98>
 800263e:	0028      	movs	r0, r5
 8002640:	f000 f9b8 	bl	80029b4 <_free_r>
 8002644:	2000      	movs	r0, #0
 8002646:	6360      	str	r0, [r4, #52]	; 0x34
 8002648:	e7bd      	b.n	80025c6 <__sflush_r+0x1a>
 800264a:	2301      	movs	r3, #1
 800264c:	0028      	movs	r0, r5
 800264e:	6a21      	ldr	r1, [r4, #32]
 8002650:	47b8      	blx	r7
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	d1c5      	bne.n	80025e2 <__sflush_r+0x36>
 8002656:	682b      	ldr	r3, [r5, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0c2      	beq.n	80025e2 <__sflush_r+0x36>
 800265c:	2b1d      	cmp	r3, #29
 800265e:	d001      	beq.n	8002664 <__sflush_r+0xb8>
 8002660:	2b16      	cmp	r3, #22
 8002662:	d101      	bne.n	8002668 <__sflush_r+0xbc>
 8002664:	602e      	str	r6, [r5, #0]
 8002666:	e7ad      	b.n	80025c4 <__sflush_r+0x18>
 8002668:	2340      	movs	r3, #64	; 0x40
 800266a:	89a2      	ldrh	r2, [r4, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	81a3      	strh	r3, [r4, #12]
 8002670:	e7a9      	b.n	80025c6 <__sflush_r+0x1a>
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	430b      	orrs	r3, r1
 8002676:	e7fa      	b.n	800266e <__sflush_r+0xc2>
 8002678:	690f      	ldr	r7, [r1, #16]
 800267a:	2f00      	cmp	r7, #0
 800267c:	d0a2      	beq.n	80025c4 <__sflush_r+0x18>
 800267e:	680a      	ldr	r2, [r1, #0]
 8002680:	600f      	str	r7, [r1, #0]
 8002682:	1bd2      	subs	r2, r2, r7
 8002684:	9201      	str	r2, [sp, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	079b      	lsls	r3, r3, #30
 800268a:	d100      	bne.n	800268e <__sflush_r+0xe2>
 800268c:	694a      	ldr	r2, [r1, #20]
 800268e:	60a2      	str	r2, [r4, #8]
 8002690:	9b01      	ldr	r3, [sp, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	dc00      	bgt.n	8002698 <__sflush_r+0xec>
 8002696:	e795      	b.n	80025c4 <__sflush_r+0x18>
 8002698:	003a      	movs	r2, r7
 800269a:	0028      	movs	r0, r5
 800269c:	9b01      	ldr	r3, [sp, #4]
 800269e:	6a21      	ldr	r1, [r4, #32]
 80026a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026a2:	47b0      	blx	r6
 80026a4:	2800      	cmp	r0, #0
 80026a6:	dc06      	bgt.n	80026b6 <__sflush_r+0x10a>
 80026a8:	2340      	movs	r3, #64	; 0x40
 80026aa:	2001      	movs	r0, #1
 80026ac:	89a2      	ldrh	r2, [r4, #12]
 80026ae:	4240      	negs	r0, r0
 80026b0:	4313      	orrs	r3, r2
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	e787      	b.n	80025c6 <__sflush_r+0x1a>
 80026b6:	9b01      	ldr	r3, [sp, #4]
 80026b8:	183f      	adds	r7, r7, r0
 80026ba:	1a1b      	subs	r3, r3, r0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	e7e7      	b.n	8002690 <__sflush_r+0xe4>
 80026c0:	20400001 	.word	0x20400001

080026c4 <_fflush_r>:
 80026c4:	690b      	ldr	r3, [r1, #16]
 80026c6:	b570      	push	{r4, r5, r6, lr}
 80026c8:	0005      	movs	r5, r0
 80026ca:	000c      	movs	r4, r1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <_fflush_r+0x12>
 80026d0:	2500      	movs	r5, #0
 80026d2:	0028      	movs	r0, r5
 80026d4:	bd70      	pop	{r4, r5, r6, pc}
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d004      	beq.n	80026e4 <_fflush_r+0x20>
 80026da:	6983      	ldr	r3, [r0, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <_fflush_r+0x20>
 80026e0:	f000 f892 	bl	8002808 <__sinit>
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <_fflush_r+0x74>)
 80026e6:	429c      	cmp	r4, r3
 80026e8:	d11b      	bne.n	8002722 <_fflush_r+0x5e>
 80026ea:	686c      	ldr	r4, [r5, #4]
 80026ec:	220c      	movs	r2, #12
 80026ee:	5ea3      	ldrsh	r3, [r4, r2]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ed      	beq.n	80026d0 <_fflush_r+0xc>
 80026f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026f6:	07d2      	lsls	r2, r2, #31
 80026f8:	d404      	bmi.n	8002704 <_fflush_r+0x40>
 80026fa:	059b      	lsls	r3, r3, #22
 80026fc:	d402      	bmi.n	8002704 <_fflush_r+0x40>
 80026fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002700:	f000 f923 	bl	800294a <__retarget_lock_acquire_recursive>
 8002704:	0028      	movs	r0, r5
 8002706:	0021      	movs	r1, r4
 8002708:	f7ff ff50 	bl	80025ac <__sflush_r>
 800270c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800270e:	0005      	movs	r5, r0
 8002710:	07db      	lsls	r3, r3, #31
 8002712:	d4de      	bmi.n	80026d2 <_fflush_r+0xe>
 8002714:	89a3      	ldrh	r3, [r4, #12]
 8002716:	059b      	lsls	r3, r3, #22
 8002718:	d4db      	bmi.n	80026d2 <_fflush_r+0xe>
 800271a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800271c:	f000 f916 	bl	800294c <__retarget_lock_release_recursive>
 8002720:	e7d7      	b.n	80026d2 <_fflush_r+0xe>
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <_fflush_r+0x78>)
 8002724:	429c      	cmp	r4, r3
 8002726:	d101      	bne.n	800272c <_fflush_r+0x68>
 8002728:	68ac      	ldr	r4, [r5, #8]
 800272a:	e7df      	b.n	80026ec <_fflush_r+0x28>
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <_fflush_r+0x7c>)
 800272e:	429c      	cmp	r4, r3
 8002730:	d1dc      	bne.n	80026ec <_fflush_r+0x28>
 8002732:	68ec      	ldr	r4, [r5, #12]
 8002734:	e7da      	b.n	80026ec <_fflush_r+0x28>
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	08002d84 	.word	0x08002d84
 800273c:	08002da4 	.word	0x08002da4
 8002740:	08002d64 	.word	0x08002d64

08002744 <std>:
 8002744:	2300      	movs	r3, #0
 8002746:	b510      	push	{r4, lr}
 8002748:	0004      	movs	r4, r0
 800274a:	6003      	str	r3, [r0, #0]
 800274c:	6043      	str	r3, [r0, #4]
 800274e:	6083      	str	r3, [r0, #8]
 8002750:	8181      	strh	r1, [r0, #12]
 8002752:	6643      	str	r3, [r0, #100]	; 0x64
 8002754:	0019      	movs	r1, r3
 8002756:	81c2      	strh	r2, [r0, #14]
 8002758:	6103      	str	r3, [r0, #16]
 800275a:	6143      	str	r3, [r0, #20]
 800275c:	6183      	str	r3, [r0, #24]
 800275e:	2208      	movs	r2, #8
 8002760:	305c      	adds	r0, #92	; 0x5c
 8002762:	f7ff fe53 	bl	800240c <memset>
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <std+0x38>)
 8002768:	6224      	str	r4, [r4, #32]
 800276a:	6263      	str	r3, [r4, #36]	; 0x24
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <std+0x3c>)
 800276e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <std+0x40>)
 8002772:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <std+0x44>)
 8002776:	6323      	str	r3, [r4, #48]	; 0x30
 8002778:	bd10      	pop	{r4, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	08002b9d 	.word	0x08002b9d
 8002780:	08002bc5 	.word	0x08002bc5
 8002784:	08002bfd 	.word	0x08002bfd
 8002788:	08002c29 	.word	0x08002c29

0800278c <_cleanup_r>:
 800278c:	b510      	push	{r4, lr}
 800278e:	4902      	ldr	r1, [pc, #8]	; (8002798 <_cleanup_r+0xc>)
 8002790:	f000 f8ba 	bl	8002908 <_fwalk_reent>
 8002794:	bd10      	pop	{r4, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	080026c5 	.word	0x080026c5

0800279c <__sfmoreglue>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2568      	movs	r5, #104	; 0x68
 80027a0:	1e4a      	subs	r2, r1, #1
 80027a2:	4355      	muls	r5, r2
 80027a4:	000e      	movs	r6, r1
 80027a6:	0029      	movs	r1, r5
 80027a8:	3174      	adds	r1, #116	; 0x74
 80027aa:	f000 f96f 	bl	8002a8c <_malloc_r>
 80027ae:	1e04      	subs	r4, r0, #0
 80027b0:	d008      	beq.n	80027c4 <__sfmoreglue+0x28>
 80027b2:	2100      	movs	r1, #0
 80027b4:	002a      	movs	r2, r5
 80027b6:	6001      	str	r1, [r0, #0]
 80027b8:	6046      	str	r6, [r0, #4]
 80027ba:	300c      	adds	r0, #12
 80027bc:	60a0      	str	r0, [r4, #8]
 80027be:	3268      	adds	r2, #104	; 0x68
 80027c0:	f7ff fe24 	bl	800240c <memset>
 80027c4:	0020      	movs	r0, r4
 80027c6:	bd70      	pop	{r4, r5, r6, pc}

080027c8 <__sfp_lock_acquire>:
 80027c8:	b510      	push	{r4, lr}
 80027ca:	4802      	ldr	r0, [pc, #8]	; (80027d4 <__sfp_lock_acquire+0xc>)
 80027cc:	f000 f8bd 	bl	800294a <__retarget_lock_acquire_recursive>
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	20000091 	.word	0x20000091

080027d8 <__sfp_lock_release>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	4802      	ldr	r0, [pc, #8]	; (80027e4 <__sfp_lock_release+0xc>)
 80027dc:	f000 f8b6 	bl	800294c <__retarget_lock_release_recursive>
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000091 	.word	0x20000091

080027e8 <__sinit_lock_acquire>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <__sinit_lock_acquire+0xc>)
 80027ec:	f000 f8ad 	bl	800294a <__retarget_lock_acquire_recursive>
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	20000092 	.word	0x20000092

080027f8 <__sinit_lock_release>:
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <__sinit_lock_release+0xc>)
 80027fc:	f000 f8a6 	bl	800294c <__retarget_lock_release_recursive>
 8002800:	bd10      	pop	{r4, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	20000092 	.word	0x20000092

08002808 <__sinit>:
 8002808:	b513      	push	{r0, r1, r4, lr}
 800280a:	0004      	movs	r4, r0
 800280c:	f7ff ffec 	bl	80027e8 <__sinit_lock_acquire>
 8002810:	69a3      	ldr	r3, [r4, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <__sinit+0x14>
 8002816:	f7ff ffef 	bl	80027f8 <__sinit_lock_release>
 800281a:	bd13      	pop	{r0, r1, r4, pc}
 800281c:	64a3      	str	r3, [r4, #72]	; 0x48
 800281e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002820:	6523      	str	r3, [r4, #80]	; 0x50
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <__sinit+0x68>)
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <__sinit+0x6c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	62a2      	str	r2, [r4, #40]	; 0x28
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	42a3      	cmp	r3, r4
 800282e:	d101      	bne.n	8002834 <__sinit+0x2c>
 8002830:	2301      	movs	r3, #1
 8002832:	61a3      	str	r3, [r4, #24]
 8002834:	0020      	movs	r0, r4
 8002836:	f000 f81f 	bl	8002878 <__sfp>
 800283a:	6060      	str	r0, [r4, #4]
 800283c:	0020      	movs	r0, r4
 800283e:	f000 f81b 	bl	8002878 <__sfp>
 8002842:	60a0      	str	r0, [r4, #8]
 8002844:	0020      	movs	r0, r4
 8002846:	f000 f817 	bl	8002878 <__sfp>
 800284a:	2200      	movs	r2, #0
 800284c:	2104      	movs	r1, #4
 800284e:	60e0      	str	r0, [r4, #12]
 8002850:	6860      	ldr	r0, [r4, #4]
 8002852:	f7ff ff77 	bl	8002744 <std>
 8002856:	2201      	movs	r2, #1
 8002858:	2109      	movs	r1, #9
 800285a:	68a0      	ldr	r0, [r4, #8]
 800285c:	f7ff ff72 	bl	8002744 <std>
 8002860:	2202      	movs	r2, #2
 8002862:	2112      	movs	r1, #18
 8002864:	68e0      	ldr	r0, [r4, #12]
 8002866:	f7ff ff6d 	bl	8002744 <std>
 800286a:	2301      	movs	r3, #1
 800286c:	61a3      	str	r3, [r4, #24]
 800286e:	e7d2      	b.n	8002816 <__sinit+0xe>
 8002870:	08002d60 	.word	0x08002d60
 8002874:	0800278d 	.word	0x0800278d

08002878 <__sfp>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	0007      	movs	r7, r0
 800287c:	f7ff ffa4 	bl	80027c8 <__sfp_lock_acquire>
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <__sfp+0x88>)
 8002882:	681e      	ldr	r6, [r3, #0]
 8002884:	69b3      	ldr	r3, [r6, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <__sfp+0x18>
 800288a:	0030      	movs	r0, r6
 800288c:	f7ff ffbc 	bl	8002808 <__sinit>
 8002890:	3648      	adds	r6, #72	; 0x48
 8002892:	68b4      	ldr	r4, [r6, #8]
 8002894:	6873      	ldr	r3, [r6, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	d504      	bpl.n	80028a4 <__sfp+0x2c>
 800289a:	6833      	ldr	r3, [r6, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d022      	beq.n	80028e6 <__sfp+0x6e>
 80028a0:	6836      	ldr	r6, [r6, #0]
 80028a2:	e7f6      	b.n	8002892 <__sfp+0x1a>
 80028a4:	220c      	movs	r2, #12
 80028a6:	5ea5      	ldrsh	r5, [r4, r2]
 80028a8:	2d00      	cmp	r5, #0
 80028aa:	d11a      	bne.n	80028e2 <__sfp+0x6a>
 80028ac:	0020      	movs	r0, r4
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <__sfp+0x8c>)
 80028b0:	3058      	adds	r0, #88	; 0x58
 80028b2:	60e3      	str	r3, [r4, #12]
 80028b4:	6665      	str	r5, [r4, #100]	; 0x64
 80028b6:	f000 f847 	bl	8002948 <__retarget_lock_init_recursive>
 80028ba:	f7ff ff8d 	bl	80027d8 <__sfp_lock_release>
 80028be:	0020      	movs	r0, r4
 80028c0:	2208      	movs	r2, #8
 80028c2:	0029      	movs	r1, r5
 80028c4:	6025      	str	r5, [r4, #0]
 80028c6:	60a5      	str	r5, [r4, #8]
 80028c8:	6065      	str	r5, [r4, #4]
 80028ca:	6125      	str	r5, [r4, #16]
 80028cc:	6165      	str	r5, [r4, #20]
 80028ce:	61a5      	str	r5, [r4, #24]
 80028d0:	305c      	adds	r0, #92	; 0x5c
 80028d2:	f7ff fd9b 	bl	800240c <memset>
 80028d6:	6365      	str	r5, [r4, #52]	; 0x34
 80028d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80028da:	64a5      	str	r5, [r4, #72]	; 0x48
 80028dc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80028de:	0020      	movs	r0, r4
 80028e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e2:	3468      	adds	r4, #104	; 0x68
 80028e4:	e7d7      	b.n	8002896 <__sfp+0x1e>
 80028e6:	2104      	movs	r1, #4
 80028e8:	0038      	movs	r0, r7
 80028ea:	f7ff ff57 	bl	800279c <__sfmoreglue>
 80028ee:	1e04      	subs	r4, r0, #0
 80028f0:	6030      	str	r0, [r6, #0]
 80028f2:	d1d5      	bne.n	80028a0 <__sfp+0x28>
 80028f4:	f7ff ff70 	bl	80027d8 <__sfp_lock_release>
 80028f8:	230c      	movs	r3, #12
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	e7ef      	b.n	80028de <__sfp+0x66>
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	08002d60 	.word	0x08002d60
 8002904:	ffff0001 	.word	0xffff0001

08002908 <_fwalk_reent>:
 8002908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800290a:	0004      	movs	r4, r0
 800290c:	0006      	movs	r6, r0
 800290e:	2700      	movs	r7, #0
 8002910:	9101      	str	r1, [sp, #4]
 8002912:	3448      	adds	r4, #72	; 0x48
 8002914:	6863      	ldr	r3, [r4, #4]
 8002916:	68a5      	ldr	r5, [r4, #8]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	9b00      	ldr	r3, [sp, #0]
 800291c:	3b01      	subs	r3, #1
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	d504      	bpl.n	800292c <_fwalk_reent+0x24>
 8002922:	6824      	ldr	r4, [r4, #0]
 8002924:	2c00      	cmp	r4, #0
 8002926:	d1f5      	bne.n	8002914 <_fwalk_reent+0xc>
 8002928:	0038      	movs	r0, r7
 800292a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800292c:	89ab      	ldrh	r3, [r5, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d908      	bls.n	8002944 <_fwalk_reent+0x3c>
 8002932:	220e      	movs	r2, #14
 8002934:	5eab      	ldrsh	r3, [r5, r2]
 8002936:	3301      	adds	r3, #1
 8002938:	d004      	beq.n	8002944 <_fwalk_reent+0x3c>
 800293a:	0029      	movs	r1, r5
 800293c:	0030      	movs	r0, r6
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	4798      	blx	r3
 8002942:	4307      	orrs	r7, r0
 8002944:	3568      	adds	r5, #104	; 0x68
 8002946:	e7e8      	b.n	800291a <_fwalk_reent+0x12>

08002948 <__retarget_lock_init_recursive>:
 8002948:	4770      	bx	lr

0800294a <__retarget_lock_acquire_recursive>:
 800294a:	4770      	bx	lr

0800294c <__retarget_lock_release_recursive>:
 800294c:	4770      	bx	lr
	...

08002950 <__swhatbuf_r>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	000e      	movs	r6, r1
 8002954:	001d      	movs	r5, r3
 8002956:	230e      	movs	r3, #14
 8002958:	5ec9      	ldrsh	r1, [r1, r3]
 800295a:	0014      	movs	r4, r2
 800295c:	b096      	sub	sp, #88	; 0x58
 800295e:	2900      	cmp	r1, #0
 8002960:	da08      	bge.n	8002974 <__swhatbuf_r+0x24>
 8002962:	220c      	movs	r2, #12
 8002964:	5eb3      	ldrsh	r3, [r6, r2]
 8002966:	2200      	movs	r2, #0
 8002968:	602a      	str	r2, [r5, #0]
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	d411      	bmi.n	8002992 <__swhatbuf_r+0x42>
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	e00f      	b.n	8002994 <__swhatbuf_r+0x44>
 8002974:	466a      	mov	r2, sp
 8002976:	f000 f983 	bl	8002c80 <_fstat_r>
 800297a:	2800      	cmp	r0, #0
 800297c:	dbf1      	blt.n	8002962 <__swhatbuf_r+0x12>
 800297e:	23f0      	movs	r3, #240	; 0xf0
 8002980:	9901      	ldr	r1, [sp, #4]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	4019      	ands	r1, r3
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <__swhatbuf_r+0x4c>)
 8002988:	18c9      	adds	r1, r1, r3
 800298a:	424b      	negs	r3, r1
 800298c:	4159      	adcs	r1, r3
 800298e:	6029      	str	r1, [r5, #0]
 8002990:	e7ed      	b.n	800296e <__swhatbuf_r+0x1e>
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	2000      	movs	r0, #0
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	b016      	add	sp, #88	; 0x58
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	ffffe000 	.word	0xffffe000

080029a0 <malloc>:
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <malloc+0x10>)
 80029a4:	0001      	movs	r1, r0
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	f000 f870 	bl	8002a8c <_malloc_r>
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	20000004 	.word	0x20000004

080029b4 <_free_r>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	0005      	movs	r5, r0
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d010      	beq.n	80029de <_free_r+0x2a>
 80029bc:	1f0c      	subs	r4, r1, #4
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da00      	bge.n	80029c6 <_free_r+0x12>
 80029c4:	18e4      	adds	r4, r4, r3
 80029c6:	0028      	movs	r0, r5
 80029c8:	f000 f980 	bl	8002ccc <__malloc_lock>
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <_free_r+0x90>)
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <_free_r+0x2c>
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	6014      	str	r4, [r2, #0]
 80029d8:	0028      	movs	r0, r5
 80029da:	f000 f97f 	bl	8002cdc <__malloc_unlock>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	d908      	bls.n	80029f6 <_free_r+0x42>
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	1860      	adds	r0, r4, r1
 80029e8:	4283      	cmp	r3, r0
 80029ea:	d1f3      	bne.n	80029d4 <_free_r+0x20>
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	1841      	adds	r1, r0, r1
 80029f2:	6021      	str	r1, [r4, #0]
 80029f4:	e7ee      	b.n	80029d4 <_free_r+0x20>
 80029f6:	001a      	movs	r2, r3
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <_free_r+0x4e>
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	d9f9      	bls.n	80029f6 <_free_r+0x42>
 8002a02:	6811      	ldr	r1, [r2, #0]
 8002a04:	1850      	adds	r0, r2, r1
 8002a06:	42a0      	cmp	r0, r4
 8002a08:	d10b      	bne.n	8002a22 <_free_r+0x6e>
 8002a0a:	6820      	ldr	r0, [r4, #0]
 8002a0c:	1809      	adds	r1, r1, r0
 8002a0e:	1850      	adds	r0, r2, r1
 8002a10:	6011      	str	r1, [r2, #0]
 8002a12:	4283      	cmp	r3, r0
 8002a14:	d1e0      	bne.n	80029d8 <_free_r+0x24>
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	1841      	adds	r1, r0, r1
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	6053      	str	r3, [r2, #4]
 8002a20:	e7da      	b.n	80029d8 <_free_r+0x24>
 8002a22:	42a0      	cmp	r0, r4
 8002a24:	d902      	bls.n	8002a2c <_free_r+0x78>
 8002a26:	230c      	movs	r3, #12
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	e7d5      	b.n	80029d8 <_free_r+0x24>
 8002a2c:	6821      	ldr	r1, [r4, #0]
 8002a2e:	1860      	adds	r0, r4, r1
 8002a30:	4283      	cmp	r3, r0
 8002a32:	d103      	bne.n	8002a3c <_free_r+0x88>
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	1841      	adds	r1, r0, r1
 8002a3a:	6021      	str	r1, [r4, #0]
 8002a3c:	6063      	str	r3, [r4, #4]
 8002a3e:	6054      	str	r4, [r2, #4]
 8002a40:	e7ca      	b.n	80029d8 <_free_r+0x24>
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	20000094 	.word	0x20000094

08002a48 <sbrk_aligned>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4e0f      	ldr	r6, [pc, #60]	; (8002a88 <sbrk_aligned+0x40>)
 8002a4c:	000d      	movs	r5, r1
 8002a4e:	6831      	ldr	r1, [r6, #0]
 8002a50:	0004      	movs	r4, r0
 8002a52:	2900      	cmp	r1, #0
 8002a54:	d102      	bne.n	8002a5c <sbrk_aligned+0x14>
 8002a56:	f000 f88f 	bl	8002b78 <_sbrk_r>
 8002a5a:	6030      	str	r0, [r6, #0]
 8002a5c:	0029      	movs	r1, r5
 8002a5e:	0020      	movs	r0, r4
 8002a60:	f000 f88a 	bl	8002b78 <_sbrk_r>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d00a      	beq.n	8002a7e <sbrk_aligned+0x36>
 8002a68:	2303      	movs	r3, #3
 8002a6a:	1cc5      	adds	r5, r0, #3
 8002a6c:	439d      	bics	r5, r3
 8002a6e:	42a8      	cmp	r0, r5
 8002a70:	d007      	beq.n	8002a82 <sbrk_aligned+0x3a>
 8002a72:	1a29      	subs	r1, r5, r0
 8002a74:	0020      	movs	r0, r4
 8002a76:	f000 f87f 	bl	8002b78 <_sbrk_r>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	d101      	bne.n	8002a82 <sbrk_aligned+0x3a>
 8002a7e:	2501      	movs	r5, #1
 8002a80:	426d      	negs	r5, r5
 8002a82:	0028      	movs	r0, r5
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000098 	.word	0x20000098

08002a8c <_malloc_r>:
 8002a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a8e:	2203      	movs	r2, #3
 8002a90:	1ccb      	adds	r3, r1, #3
 8002a92:	4393      	bics	r3, r2
 8002a94:	3308      	adds	r3, #8
 8002a96:	0006      	movs	r6, r0
 8002a98:	001f      	movs	r7, r3
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d232      	bcs.n	8002b04 <_malloc_r+0x78>
 8002a9e:	270c      	movs	r7, #12
 8002aa0:	42b9      	cmp	r1, r7
 8002aa2:	d831      	bhi.n	8002b08 <_malloc_r+0x7c>
 8002aa4:	0030      	movs	r0, r6
 8002aa6:	f000 f911 	bl	8002ccc <__malloc_lock>
 8002aaa:	4d32      	ldr	r5, [pc, #200]	; (8002b74 <_malloc_r+0xe8>)
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	001c      	movs	r4, r3
 8002ab0:	2c00      	cmp	r4, #0
 8002ab2:	d12e      	bne.n	8002b12 <_malloc_r+0x86>
 8002ab4:	0039      	movs	r1, r7
 8002ab6:	0030      	movs	r0, r6
 8002ab8:	f7ff ffc6 	bl	8002a48 <sbrk_aligned>
 8002abc:	0004      	movs	r4, r0
 8002abe:	1c43      	adds	r3, r0, #1
 8002ac0:	d11e      	bne.n	8002b00 <_malloc_r+0x74>
 8002ac2:	682c      	ldr	r4, [r5, #0]
 8002ac4:	0025      	movs	r5, r4
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	d14a      	bne.n	8002b60 <_malloc_r+0xd4>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	0029      	movs	r1, r5
 8002ace:	18e3      	adds	r3, r4, r3
 8002ad0:	0030      	movs	r0, r6
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	f000 f850 	bl	8002b78 <_sbrk_r>
 8002ad8:	9b01      	ldr	r3, [sp, #4]
 8002ada:	4283      	cmp	r3, r0
 8002adc:	d143      	bne.n	8002b66 <_malloc_r+0xda>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	3703      	adds	r7, #3
 8002ae2:	1aff      	subs	r7, r7, r3
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	439f      	bics	r7, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	2f0c      	cmp	r7, #12
 8002aec:	d200      	bcs.n	8002af0 <_malloc_r+0x64>
 8002aee:	270c      	movs	r7, #12
 8002af0:	0039      	movs	r1, r7
 8002af2:	0030      	movs	r0, r6
 8002af4:	f7ff ffa8 	bl	8002a48 <sbrk_aligned>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d034      	beq.n	8002b66 <_malloc_r+0xda>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	19df      	adds	r7, r3, r7
 8002b00:	6027      	str	r7, [r4, #0]
 8002b02:	e013      	b.n	8002b2c <_malloc_r+0xa0>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	dacb      	bge.n	8002aa0 <_malloc_r+0x14>
 8002b08:	230c      	movs	r3, #12
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	6033      	str	r3, [r6, #0]
 8002b0e:	0028      	movs	r0, r5
 8002b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	1bd1      	subs	r1, r2, r7
 8002b16:	d420      	bmi.n	8002b5a <_malloc_r+0xce>
 8002b18:	290b      	cmp	r1, #11
 8002b1a:	d917      	bls.n	8002b4c <_malloc_r+0xc0>
 8002b1c:	19e2      	adds	r2, r4, r7
 8002b1e:	6027      	str	r7, [r4, #0]
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	d111      	bne.n	8002b48 <_malloc_r+0xbc>
 8002b24:	602a      	str	r2, [r5, #0]
 8002b26:	6863      	ldr	r3, [r4, #4]
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	6053      	str	r3, [r2, #4]
 8002b2c:	0030      	movs	r0, r6
 8002b2e:	0025      	movs	r5, r4
 8002b30:	f000 f8d4 	bl	8002cdc <__malloc_unlock>
 8002b34:	2207      	movs	r2, #7
 8002b36:	350b      	adds	r5, #11
 8002b38:	1d23      	adds	r3, r4, #4
 8002b3a:	4395      	bics	r5, r2
 8002b3c:	1aea      	subs	r2, r5, r3
 8002b3e:	429d      	cmp	r5, r3
 8002b40:	d0e5      	beq.n	8002b0e <_malloc_r+0x82>
 8002b42:	1b5b      	subs	r3, r3, r5
 8002b44:	50a3      	str	r3, [r4, r2]
 8002b46:	e7e2      	b.n	8002b0e <_malloc_r+0x82>
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	e7ec      	b.n	8002b26 <_malloc_r+0x9a>
 8002b4c:	6862      	ldr	r2, [r4, #4]
 8002b4e:	42a3      	cmp	r3, r4
 8002b50:	d101      	bne.n	8002b56 <_malloc_r+0xca>
 8002b52:	602a      	str	r2, [r5, #0]
 8002b54:	e7ea      	b.n	8002b2c <_malloc_r+0xa0>
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	e7e8      	b.n	8002b2c <_malloc_r+0xa0>
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	6864      	ldr	r4, [r4, #4]
 8002b5e:	e7a7      	b.n	8002ab0 <_malloc_r+0x24>
 8002b60:	002c      	movs	r4, r5
 8002b62:	686d      	ldr	r5, [r5, #4]
 8002b64:	e7af      	b.n	8002ac6 <_malloc_r+0x3a>
 8002b66:	230c      	movs	r3, #12
 8002b68:	0030      	movs	r0, r6
 8002b6a:	6033      	str	r3, [r6, #0]
 8002b6c:	f000 f8b6 	bl	8002cdc <__malloc_unlock>
 8002b70:	e7cd      	b.n	8002b0e <_malloc_r+0x82>
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	20000094 	.word	0x20000094

08002b78 <_sbrk_r>:
 8002b78:	2300      	movs	r3, #0
 8002b7a:	b570      	push	{r4, r5, r6, lr}
 8002b7c:	4d06      	ldr	r5, [pc, #24]	; (8002b98 <_sbrk_r+0x20>)
 8002b7e:	0004      	movs	r4, r0
 8002b80:	0008      	movs	r0, r1
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	f7fe f81e 	bl	8000bc4 <_sbrk>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d103      	bne.n	8002b94 <_sbrk_r+0x1c>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <_sbrk_r+0x1c>
 8002b92:	6023      	str	r3, [r4, #0]
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	2000009c 	.word	0x2000009c

08002b9c <__sread>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	000c      	movs	r4, r1
 8002ba0:	250e      	movs	r5, #14
 8002ba2:	5f49      	ldrsh	r1, [r1, r5]
 8002ba4:	f000 f8a2 	bl	8002cec <_read_r>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	db03      	blt.n	8002bb4 <__sread+0x18>
 8002bac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bae:	181b      	adds	r3, r3, r0
 8002bb0:	6563      	str	r3, [r4, #84]	; 0x54
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <__sread+0x24>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	81a3      	strh	r3, [r4, #12]
 8002bbc:	e7f9      	b.n	8002bb2 <__sread+0x16>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	ffffefff 	.word	0xffffefff

08002bc4 <__swrite>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	001f      	movs	r7, r3
 8002bc8:	898b      	ldrh	r3, [r1, #12]
 8002bca:	0005      	movs	r5, r0
 8002bcc:	000c      	movs	r4, r1
 8002bce:	0016      	movs	r6, r2
 8002bd0:	05db      	lsls	r3, r3, #23
 8002bd2:	d505      	bpl.n	8002be0 <__swrite+0x1c>
 8002bd4:	230e      	movs	r3, #14
 8002bd6:	5ec9      	ldrsh	r1, [r1, r3]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f000 f862 	bl	8002ca4 <_lseek_r>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <__swrite+0x34>)
 8002be4:	0028      	movs	r0, r5
 8002be6:	4013      	ands	r3, r2
 8002be8:	81a3      	strh	r3, [r4, #12]
 8002bea:	0032      	movs	r2, r6
 8002bec:	230e      	movs	r3, #14
 8002bee:	5ee1      	ldrsh	r1, [r4, r3]
 8002bf0:	003b      	movs	r3, r7
 8002bf2:	f000 f81f 	bl	8002c34 <_write_r>
 8002bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf8:	ffffefff 	.word	0xffffefff

08002bfc <__sseek>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	000c      	movs	r4, r1
 8002c00:	250e      	movs	r5, #14
 8002c02:	5f49      	ldrsh	r1, [r1, r5]
 8002c04:	f000 f84e 	bl	8002ca4 <_lseek_r>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	1c42      	adds	r2, r0, #1
 8002c0c:	d103      	bne.n	8002c16 <__sseek+0x1a>
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <__sseek+0x28>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	0152      	lsls	r2, r2, #5
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8002c20:	e7f8      	b.n	8002c14 <__sseek+0x18>
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	ffffefff 	.word	0xffffefff

08002c28 <__sclose>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	230e      	movs	r3, #14
 8002c2c:	5ec9      	ldrsh	r1, [r1, r3]
 8002c2e:	f000 f815 	bl	8002c5c <_close_r>
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <_write_r>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	0004      	movs	r4, r0
 8002c38:	0008      	movs	r0, r1
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	4d05      	ldr	r5, [pc, #20]	; (8002c58 <_write_r+0x24>)
 8002c42:	602b      	str	r3, [r5, #0]
 8002c44:	f7fd fe92 	bl	800096c <_write>
 8002c48:	1c43      	adds	r3, r0, #1
 8002c4a:	d103      	bne.n	8002c54 <_write_r+0x20>
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d000      	beq.n	8002c54 <_write_r+0x20>
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	2000009c 	.word	0x2000009c

08002c5c <_close_r>:
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	b570      	push	{r4, r5, r6, lr}
 8002c60:	4d06      	ldr	r5, [pc, #24]	; (8002c7c <_close_r+0x20>)
 8002c62:	0004      	movs	r4, r0
 8002c64:	0008      	movs	r0, r1
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	f7fd feb6 	bl	80009d8 <_close>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d103      	bne.n	8002c78 <_close_r+0x1c>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d000      	beq.n	8002c78 <_close_r+0x1c>
 8002c76:	6023      	str	r3, [r4, #0]
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	2000009c 	.word	0x2000009c

08002c80 <_fstat_r>:
 8002c80:	2300      	movs	r3, #0
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	4d06      	ldr	r5, [pc, #24]	; (8002ca0 <_fstat_r+0x20>)
 8002c86:	0004      	movs	r4, r0
 8002c88:	0008      	movs	r0, r1
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	f7fd fef5 	bl	8000a7c <_fstat>
 8002c92:	1c43      	adds	r3, r0, #1
 8002c94:	d103      	bne.n	8002c9e <_fstat_r+0x1e>
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d000      	beq.n	8002c9e <_fstat_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	2000009c 	.word	0x2000009c

08002ca4 <_lseek_r>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	0004      	movs	r4, r0
 8002ca8:	0008      	movs	r0, r1
 8002caa:	0011      	movs	r1, r2
 8002cac:	001a      	movs	r2, r3
 8002cae:	2300      	movs	r3, #0
 8002cb0:	4d05      	ldr	r5, [pc, #20]	; (8002cc8 <_lseek_r+0x24>)
 8002cb2:	602b      	str	r3, [r5, #0]
 8002cb4:	f7fd fea7 	bl	8000a06 <_lseek>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d103      	bne.n	8002cc4 <_lseek_r+0x20>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d000      	beq.n	8002cc4 <_lseek_r+0x20>
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	bd70      	pop	{r4, r5, r6, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	2000009c 	.word	0x2000009c

08002ccc <__malloc_lock>:
 8002ccc:	b510      	push	{r4, lr}
 8002cce:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <__malloc_lock+0xc>)
 8002cd0:	f7ff fe3b 	bl	800294a <__retarget_lock_acquire_recursive>
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	20000090 	.word	0x20000090

08002cdc <__malloc_unlock>:
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <__malloc_unlock+0xc>)
 8002ce0:	f7ff fe34 	bl	800294c <__retarget_lock_release_recursive>
 8002ce4:	bd10      	pop	{r4, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000090 	.word	0x20000090

08002cec <_read_r>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0004      	movs	r4, r0
 8002cf0:	0008      	movs	r0, r1
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4d05      	ldr	r5, [pc, #20]	; (8002d10 <_read_r+0x24>)
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	f7fd fe94 	bl	8000a28 <_read>
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	d103      	bne.n	8002d0c <_read_r+0x20>
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d000      	beq.n	8002d0c <_read_r+0x20>
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	2000009c 	.word	0x2000009c

08002d14 <_init>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr

08002d20 <_fini>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr
